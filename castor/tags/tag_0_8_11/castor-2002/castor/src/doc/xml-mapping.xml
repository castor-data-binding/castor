<?xml version="1.0" encoding="ISO-8859-1"?>

<document url="http://castor.exolab.org/xml-mapping.xml">

  <properties>
    <title>Castor XML Mapping</title>
    <author email="gignoux@intalio.com">Sebastien Gignoux</author>
    <abstract>
       Describes how to use the Castor XML Mapping.
    </abstract>
    <status>Draft</status>
  </properties>

  <body>
    <title>Castor XML Mapping</title>

    <section title="1 Introduction">

      <p>Although it is possible to rely on Castor's default behavior to marshal and
        unmarshal Java objects into an XML document, it might be necessary to have more
        control over this behavior. For example, if a Java object model already exists,
        Castor XML Mapping can be used as a bridge between the XML document and that
        Java object model.</p>

      <p>Castor allows one to specify some of its marshalling/unmarshalling behavior
        using a mapping file. This file gives explicit information to Castor on how a
        given XML document and a given set of Java objects relate to each other.</p>

      <p>A Castor mapping file is a good way to dissociate the changes in the structure
        of a Java object model from the changes in the corresponding XML document
        format.</p>

    </section>

    <section title="2 Overview">

      <p>The mapping information is specified by an XML document. This document is
        written from the point of view of the Java object and describes how the
        properties of the object have to be translated into XML. One constraint for the
        mapping file is that Castor should be able to infer unambiguously from it how a
        given XML element/attribute has to be translated into the object model during
        unmarshalling.</p>

      <p>The mapping file describes for each object how each of its fields have to be
        mapped into XML. A field is an abstraction for a property of an object. It can
        correspond directly to a public class variable or indirectly to a property via
        some accessor methods (setters and getters).</p>

      <p>It is possible to use the mapping and Castor default behavior in conjunction:
        when Castor has to handle an object or an XML data but can't find information
        about it in the mapping file, it will rely on its default behavior. Castor will
        use the Java Reflection API to introspect the Java objects to determine what to do.</p>

      <p><b>Note:</b> Castor can't handle all possible mappings. In some complex cases, it may be
        necessary to rely on an XSL transformation in conjunction with Castor to adapt the
        XML document to a more friendly format.</p>


      <section title="2.1 Marshalling Behavior">

        <p>For Castor, a Java class has to map into an XML element. When Castor marshals an
          object, it will:</p>
        
        <ul>
          <li>use the mapping information, if any, to find the name of the element to create</li>
        </ul>

        <p>or</p>

        <ul>
          <li>by default, create a name using the name of the class</li>
        </ul>

        <p>It will then use the field information from the mapping file to determine if a
          given property of the object has to be translated into one and only one of the
          following:</p>

        <ul>
          <li>an attribute</li>
          <li>an element</li>
          <li>text content</li>
          <li>nothing, as we can choose to ignore a particular field</li>
        </ul>

        <p>This process will be recursive: if Castor finds a property that has a class type
          specified elsewhere in the mapping file, it will use this information to marshal
          the object.</p>

        <p>By default, if Castor finds no information for a given class in the mapping
          file, it will introspect the class and apply a set of default rules to guess the
          fields and marshal them. The default rules are as follows:</p>

        <ul>
          <li>All primitive types, including the primitive type wrappers (Boolean,
            Short, etc...) are marshalled as attributes.</li>
          <li>All other objects are marshalled as elements with either text content
            or element content.</li>
        </ul>

      </section>

      <section title="2.2 Unmarshalling Behavior">

        <p>When Castor finds an element while unmarshalling a document, it will try to use
          the mapping information to determine which object to instantiate. If no mapping
          information is present, Castor will use the name of the element to try to find
          the name of a class to instantiate (for example, for an element named
          'test-element', Castor will try to instantiate a class named 'TestElement' if no
          information is given in the mapping file). Castor will then use the field
          information of the mapping file to handle the content of the element.</p>

        <p>If the class is not described in the mapping file, Castor will instrospect the
          class using the Java Reflection API to determine if there is any function of the
          form getXxxYyy()/setXxxYyy(&lt;type> x). This accessor will be associated with XML
          element/attribute named 'xxx-yyy'. In the future, we will provide a way to
          override this default behavior.</p>

        <p>Castor will introspect object variables and use direct access _only_ if no
          get/set methods have been found in the class. In this case, Castor will look for
          public variables of the form:</p>

        <code>
          public &lt;type> xxxYYY;
        </code>

        <p>and expect an element/attribute named 'xxx-yyy'. The only handled
          collections for &lt;type> are java.lang.Vector and array. (up to version
          0.8.10)</p>

        <p>For primitive &lt;type>, Castor will look for an attribute first and then an
          element. If &lt;type> is not a primitive type, Castor will look for an element
          first and then an attribute.</p>

      </section>
    </section>
    

    <section title="3. The Mapping File">
      
      <section title="3.1 The &lt;mapping> element">

        <code>
          &lt;!ELEMENT mapping ( description?, include*, class*, key-generator* )>
        </code>

        <p>The &lt;mapping> element is the root element of a mapping file. It contains:</p>

        <ul>
          <li>an optional description</li>

          <li>zero or more &lt;include> which facilitates reusing mapping files</li>

          <li>zero or more &lt;class> descriptions: one for each class we intend to give
            mapping information</li>

          <li>zero or more &lt;key-generator>: not used for XML mapping</li>

        </ul>

        <p>A mapping file look like this:</p>

        <code>
        &lt;?xml version="1.0"?>

        &lt;!DOCTYPE mapping PUBLIC "-//EXOLAB/Castor Object Mapping DTD Version 1.0//EN"
                                 "http://Castor.exolab.org/mapping.dtd">

        &lt;mapping>
                &lt;description>Description of the mapping&lt;/description>

                &lt;include include="other_mapping_file.xml"/>

                &lt;class name="A">
                        .........
                &lt;/class>

                &lt;class name="B">
                        .........
                &lt;/class>

        &lt;/mapping>

        </code>

      </section>

      <section title="3.2 The &lt;class> element  "> 

        <code>
        &lt;!ELEMENT class ( description?, cache-type?, map-to?, field+ )>
        &lt;!ATTLIST class
                  name            ID       #REQUIRED
                  extends         IDREF    #IMPLIED
                  depends         IDREF    #IMPLIED
                  identity        CDATA    #IMPLIED
                  access          ( read-only | shared | exclusive | db-locked )  "shared"
                  key-generator   IDREF    #IMPLIED >
        </code>


        <p>The  &lt;class> element contains all the information used to map a Java class into an
          XML document. The content of &lt;class> is mainly used to describe the fields that
            will be mapped.</p>

        <p>Description of the attributes:</p>

        <ul>
          <li><b>name:</b> the name of the Java class that we want to map to. It should
            look like 'mypackage.myclass'</li>

          <li><b>extends:</b> should be used _only_ if this class extends another class
            for which mapping information is provided. It should _not_ be used
            if the extended class is not used in the mapping file.</li>

          <li><b>depends:</b> for more information on this fields, see JDO
            documentation.</li>

          <li><b>identity:</b> for more information on this fields, see JDO
            documentation</li>

          <li><b>access:</b> for more information on this fields, see JDO documentation</li>
          
          <li><b>key-generator</b>: for more information on this fields, see JDO
            documentation</li>
        </ul>

        <p>Description of the content:</p>

        <ul>
             <li><b>description</b>: an optional &lt;description></li>

             <li><b>cache-type:</b> for more information on this field, see JDO
             documentation</li>

             <li><b>an optional &lt;map-to></b>. Used if the name of the element is not the
             name of the class. By default, Castor will infer the name of the
             element to be mapped from the name of the class: a Java class named
             'XxxYyy' will be transformed in 'xxx-yyy'. If you don't want Castor
             to generate the name, you need to use &lt;map-to> to specify the name
             you want to use. &lt;map-to> is only used for the root element.</li>

             <li><b>field:</b> zero or more &lt;field> which are used to describe properties of the
             Java objects.</li>
        </ul>

        <p>If you want to map the following class into the element '&lt;data>':</p>

        <code>
package mypackage

public class myclass {
       ...

       public int foo;
       ...

       public String getBar()
       ...

       public void setBar(String bar)
       ...
}
        </code>

        <p>Into an XML document like:</p>

        <code>
        &lt;data foo-like="12">
                &lt;something>
                        ...
                &lt;/something>

        &lt;/data>
        </code>

        <p>You might use the following mapping file:</p>

        <code>
        &lt;mapping>

                ...

                &lt;class name="mypackage.myclass">
                        &lt;map-to xml="data"/>


                        &lt;field name="foo"
                               direct="true"
                                ....
                               >
                                &lt;bind-xml name="foo-like" node="attribute"/>
                        &lt;/field>


                        &lt;/field name="bar"
                                ....
                               >
                                &lt;bind-xml name="something" node="element"/>
                        &lt;/field>

               &lt;/class>

               ...

        &lt;/mapping>

        </code>

      </section>

      <section title="3.3 The &lt;map-to> element">

        <code>
        &lt;!ELEMENT map-to EMPTY>
        &lt;!ATTLIST map-to
                  table      NMTOKEN  #IMPLIED
                  xml        NMTOKEN  #IMPLIED
                  ns-uri     NMTOKEN  #IMPLIED
                  ns-prefix  NMTOKEN  #IMPLIED
                  ldap-dn    NMTOKEN  #IMPLIED
                  ldap-oc    NMTOKEN  #IMPLIED>
        </code>

        <p>&lt;map-to> is used to specify the name of the element that should be associated
          with the given class.&lt;map-to> is only used for the root class. If this
          information is not present, Castor will:</p>

        <ul>
          <li>for marshalling, infer the name of the element to be mapped from the name of
            the class: a Java class named 'XxxYyy' will be transformed into 'xxx-yyy'.</li>

          <li>for unmarshalling, infer the name of the class from the name of the element :
            for an element named 'test-element' Castor will try to use a
            class named 'TestElement'</li>
        </ul>

        <p>Description of the attributes:</p>

        <ul>
          <li><b>xml:</b> name of the element that the class is associated to.</li>

          <li><b>ns-uri</b>: namespace URI</li>

          <li><b>ns-prefix:</b> desired namespace</li>

          <li><b>ldap-dn:</b> not used for XML</li>

          <li><b>ldap-oc:</b> not used for XML</li>
        </ul>

      </section>


      <section title="3.4 The &lt;field> element">

        <code>
        &lt;!ELEMENT field ( description?, sql?, xml?, ldap? )>
        &lt;!ATTLIST field
                  name           NMTOKEN  #REQUIRED
                  type           NMTOKEN  #IMPLIED
                  required       ( true | false )  "false"
                  direct         ( true | false )  "false"
                  lazy           ( true | false )  "false"
                  get-method     NMTOKEN  #IMPLIED
                  set-method     NMTOKEN  #IMPLIED
                  create-method  NMTOKEN  #IMPLIED
                  collection     ( array | vector | hashtable | collection | set | map )  #IMPLIED>
        </code> 

        <p>&lt;field> is used to describe a property of a Java object we want to
          marshal/unmarshal. It gives:</p>
        <ul>
          <li>its identity ('name')</li>
          <li>its type (infered from 'type' and 'collection')</li>
          <li>its access method (infered from 'direct', 'get-method', 'set-method')</li>
        </ul>

        <p>From this information, Castor is able to access a given property in the Java
          class.</p>

        <p>In order to determine the signature that Castor expects, there are two easy
          rules to apply.</p>

        <p><b>1. Determine &lt;type>.</b></p> 

        <ul>
          <li><p><b>If there is no 'collection' attribute</b>, the &lt;type> is just the Java type
            specified in &lt;type_attribute> (the value of the 'type' attribute in the XML
            document). The value of &lt;type_attribute> can be a fully qualified Java object
            like 'java.lang.String' or one of the allowed short name:</p>

            <table border="1" cellpadding="4">
              <tr><th>short name</th><th>Primitive type?</th><th>Java Class</th></tr>
              <tr><td>other</td><td>N</td><td>java.lang.Object</td></tr>
              <tr><td>string</td><td>N</td><td>java.lang.String</td></tr>
              <tr><td>integer</td><td>Y</td><td>java.lang.Integer.TYPE</td></tr>
              <tr><td>long</td><td>Y</td><td>java.lang.Long.TYPE</td></tr>
              <tr><td>boolean</td><td>Y</td><td>java.lang.Boolean.TYPE</td></tr>
              <tr><td>double</td><td>Y</td><td>java.lang.Double.TYPE</td></tr>
              <tr><td>float</td><td>Y</td><td>java.lang.Float.TYPE</td></tr>
              <tr><td>big-decimal</td><td>N</td><td>java.math.BigDecimal</td></tr>
              <tr><td>byte</td><td>Y</td><td>java.lang.Byte.TYPE</td></tr>
              <tr><td>date</td><td>N</td><td>java.util.Date</td></tr>
              <tr><td>short</td><td>Y</td><td>java.lang.Short.TYPE</td></tr>
              <tr><td>char</td><td>Y</td><td>java.lang.Character.TYPE</td></tr>
              <tr><td>bytes</td><td>N</td><td>byte[]</td></tr>
              <tr><td>chars</td><td>N</td><td>char[]</td></tr>
              <tr><td>strings</td><td>N</td><td>String[]</td></tr>                
              <tr><td>locale</td><td>N</td><td>java.util.Locale</td></tr>
            </table>

            <p>Castor will try to cast the data in the XML file in the proper Java type.</p></li>


          <li><b>If there is a collection attribute</b>, you can use the following table:

            <table border="1" cellpadding="4">
              <tr><th>name</th><th>&lt;type></th><th>default implementation</th></tr>
              <tr><td>array</td><td>&lt;type_attribute>[]</td><td>&lt;type_attribute>[]</td></tr>
              <tr><td>vector</td><td>java.util.Vector</td><td>java.util.Vector</td></tr>
              <tr><td>hashtable</td><td>java.util.Hashtable</td><td>java.util.Hashtable</td></tr>
              <tr><td>collection</td><td>java.util.Collection</td><td>java.util.Arraylist </td></tr>
              <tr><td>set</td><td>java.util.Set</td><td>java.util.Hashset</td></tr>
              <tr><td>map</td><td>java.util.Map</td><td>java.util.Hashmap</td></tr>
            </table>

            <p>The type of the object inside the collection is &lt;type_attribute>. The 'default
              implementation' is the type used if the object holding the collection is found
              to be null and need to be instantiated.</p>

            <p>For hashtable and map, Castor will add an object with put(object, object): the object
              is both the key and the value. This will be improved in the future.</p></li>
        </ul>

        <p>It is necessary to use a collection when the content model of the
          element expects more than one element of the specified type.</p>


        <p><b>2. Determine the signature of the function</b></p>

        <li> <p><b>If 'direct' is set to true</b>, Castor expects to find a class variable with the
            given signature:</p>

          <code>
            public &lt;type> &lt;name>;
          </code>

          <li><p><b>If 'direct' is set to false or omitted</b>, Castor will access the property
              though accessor methods. Castor determines the signature of the accessors as
              follow: If the 'get-method' or 'set-method' attributes are supplied, it will
              try to find a function with the following signature:</p>

            <code>
              public &lt;type> &lt;get-method>();
            </code>
            or
            <code>
              public void &lt;set-method>(&lt;type> value);
            </code>

            <p>If 'get-method' or 'set-method' attributes are not provided, Castor will try to
              find the following function:</p>

            <code>
              public &lt;type> get&lt;capitalized-name>();
            </code>
            or
            <code>
              public void set&lt;capitalized-name>(&lt;type> value);
            </code>
            
            <p>&lt;capitalized-name> means that Castor takes the &lt;name> attribute and put its first
              letter in uppercase without modifying the other letters.</p>

            <p>The content of &lt;field> will contain the information on how to map this given
              field to SQL, XML, ...</p>
          </li>
        </li>

        <p>Description of the attributes: </p>

        <ul>
          <li><b>name:</b> The field 'name' is required even if no such field exists in the
            class. If 'direct' access is used, 'name' should be the name of a public
            variable in the object we are mapping (The field must be public, not
            static and not transient). If no direct access and no 'get-/set-method'
            is specified, this name will be used to infer the name of the accessors
            methods.</li>

          <li><b>type:</b> the Java type of the field. It is used to access the
            field. Castor will use this information to cast the XML information
            (like string into integer). It is also used to define the signature of
            the accessors method. If a collection is specified, this is used to
            specify the type of the object inside the collection. See description
            above for more details.</li>

          <li><b>required:</b> the field can the optional or required</li>

          <li><b>direct:</b> if true, Castor will expect a public variable in the object
            and will modify it directly</li>

          <li><b>collection:</b> if a parent expects more than one occurrence of
            one of its element, it is necessary to specify which collection
            Castor will use to handle them. The type specified is used to
            define the type of the content inside the collection.</li>

          <li><b>get-method:</b> optional name of the get method Castor should use. If
            this attribute is not set, Castor will try to guess the name with the
            algorithm described above.</li>


          <li><b>set-method:</b> optional name of the set method Castor should use. If
            this attribute is not set, Castor will try to guess the name with the
            algorithm described above.</li>

          <li><b>create-method:</b> Factory method for instantiation of FieldHandler</li>
        </ul>


        <p>Description of the content:</p>

        <p>In the case of XML mapping, the content of a field element should be one and
          only one &lt;xml> element describing how this given field will be mapped into the
          XML document.</p>
      </section>
          

      <section title="3.5 The &lt;bind-xml> element">

        <code>
        &lt;!ELEMENT bind-xml EMPTY>
        &lt;!ATTLIST bind-xml
                  name     NMTOKEN  #IMPLIED
                  type     NMTOKEN  #IMPLIED
                  matches  NMTOKEN  #IMPLIED
                  node     ( attribute | element | text )  #IMPLIED>
        </code> 

        <p>&lt;bind-xml> is used to describe how a given Java field should appear in an XML
          document. It is used both for marshalling and unmarshalling.</p>

        <p>Description of the attributes:</p>
        <ul>
          <li><b>name:</b> the name of the element or attribute</li>

          <li><b>type:</b> xsi::type</li>
          
          <li><b>matches:</b> not used</li>
          
          <li><b>node:</b> indicates if the name corresponds to an attribute, an element,
            or text content. By default, primitive types are assumed to be an attribute
            otherwise the node is assumed to be an element</li>
        </ul>

      </section>
    </section>
    <section title="4. Usage Pattern">

      <p>Here is an example of how Castor Mapping can be used. We want to map an XML
        document like the following one (called 'order.xml').
        model.</p>

      <table border="1" cellpadding="4">
        <tr><td BGCOLOR="#CCCCCC">
            <code>
&lt;Order reference="12343-AHSHE-314159">
        &lt;Client>
                &lt;Name>Jean Smith&lt;/Name>
                &lt;Address>2000, Alameda de las Pulgas, San Mateo, CA 94403&lt;/Address>
        &lt;/Client>

        &lt;Item reference="RF-0001">
                &lt;Description>Stuffed Penguin&lt;/Description>
                &lt;Quantity>10&lt;/Quantity>
                &lt;UnitPrice>8.95&lt;/UnitPrice>
        &lt;/Item>

        &lt;Item reference="RF-0034">
                &lt;Description>Chocolate&lt;/Description>
                &lt;Quantity>5&lt;/Quantity>
                &lt;UnitPrice>28.50&lt;/UnitPrice>
        &lt;/Item>

        &lt;Item reference="RF-3341">
                &lt;Description>Cookie&lt;/Description>
                &lt;Quantity>30&lt;/Quantity>
                &lt;UnitPrice>0.85&lt;/UnitPrice>
        &lt;/Item>      
&lt;/Order>
            </code>
          </td></tr>
      </table>

      <p>Into the following object model composed of 3 classes:</p>
      <ul>
        <li><b>MyOrder:</b> represent an order</li>
        <li><b>Client:</b> used to store information on the client</li>
        <li><b>Item:</b> used to store item in an order</li>
      </ul>

      <p>The sources of these classes follow.</p>

      <table border="1" cellpadding="4">
        <tr>
          <th>
            MyOrder.java
          </th>
        </tr>
        <tr>
          <td BGCOLOR="#CCCCCC">
      <code>
import java.util.Vector;
import java.util.Enumeration;

public class MyOrder {

    private String _ref;
    private ClientData _client;
    private Vector _items;
    private float _total;

    public void setReference(String ref) {
        _ref = ref;
    }

    public String getReference() {
        return _ref;
    }

    public void setClientData(ClientData client) {
        _client = client;
    }

    public ClientData getClientData() {
        return _client;
    }

    public void setItemsList(Vector items) {
        _items = items;
    }

    public Vector getItemsList() {
        return _items;
    }

        
    public void setTotal(float total) {
        _total = total;
    }

    public float getTotal() {
        return _total;
    }

    // Do some processing on the data
    public float getTotalPrice() {
        float total = 0.0f;

        for (Enumeration e = _items.elements() ; e.hasMoreElements() ;) {
            Item item = (Item) e.nextElement();
            total += item._quantity * item._unitPrice;
        }

        return total;
    }
}
            </code>
          </td>
        </tr>
      </table>


      <table border="1" cellpadding="4">
        <tr>
          <th>
            ClientData.java
          </th>
        </tr>
        <tr>
          <td BGCOLOR="#CCCCCC">
            <code>

public class ClientData {

    private String _name;
    private String _address;

    public void setName(String name) {
        _name = name;
    }

    public String getName() {
        return _name;
    }

    public void setAddress(String address) {
        _address = address;
    }

    public String getAddress() {
        return _address;
    }
}
            </code>
          </td>
        </tr>
      </table>

      <table border="1" cellpadding="4">
        <tr>
          <th>
            Item.java
          </th>
        </tr>
        <tr>
          <td BGCOLOR="#CCCCCC">
            <code>
public class Item {
    public String _reference;
    public int    _quantity;
    public float  _unitPrice;
}
            </code>
          </td>
        </tr>
      </table>

      <p>The XML document and the java object model can be connected by using the
        following mapping file:</p>

      <table border="1" cellpadding="4">
        <tr>
          <th>
            mapping.xml
          </th>
        </tr>
        <tr>
          <td BGCOLOR="#CCCCCC">
            <code>
&lt;?xml version="1.0"?>
&lt;!DOCTYPE mapping PUBLIC "-//EXOLAB/Castor Object Mapping DTD Version 1.0//EN"
                         "http://Castor.exolab.org/mapping.dtd">

&lt;mapping>
        &lt;class name="MyOrder">
                &lt;map-to xml="Order"/>
        
                &lt;field name="Reference"
                       type="java.lang.String">
                        &lt;bind-xml name="reference" node="attribute"/>
                &lt;/field>

                &lt;field name="Total"
                       type="float">
                        &lt;bind-xml name="total-price" node="attribute"/>
                &lt;/field>

                &lt;field name="ClientData"
                       type="ClientData">
                        &lt;bind-xml name="Client"/>
                &lt;/field>

                &lt;field name="ItemsList"
                       type="Item"
                          collection="vector">
                        &lt;bind-xml name="Item"/>
                &lt;/field>
        &lt;/class>

        &lt;class name="ClientData">
                &lt;field name="Name"
                       type="java.lang.String">
                        &lt;bind-xml name="Name" node="element"/>
                &lt;/field>

                &lt;field name="Address"
                       type="java.lang.String">
                        &lt;bind-xml name="Address" node="element"/>
                &lt;/field>
        &lt;/class>

        &lt;class name="Item">
                &lt;field name="_reference"
                       type="java.lang.String"
                       direct="true">
                        &lt;bind-xml name="reference" node="attribute"/>
                &lt;/field>

                &lt;field name="_quantity"
                       type="integer"
                       direct="true">
                        &lt;bind-xml name="Quantity" node="element"/>
                &lt;/field>

                &lt;field name="_unitPrice"
                       type="float"
                       direct="true">
                        &lt;bind-xml name="UnitPrice" node="element"/>
                &lt;/field>
        &lt;/class>

&lt;/mapping>
            </code>
          </td>
        </tr>
      </table>

      <p>The following class is an example of how to use Castor XML Mapping to
        manipulate the file 'order.xml'. It unmarshals the document 'order.xml',
        computes the total price, sets the total price in the java object and
        marshals the object model back into XML with the calculated price.</p>

      <table border="1" cellpadding="4">
        <tr>
          <th>
            main.java
          </th>
        </tr>
        <tr>
          <td BGCOLOR="#CCCCCC">
            <code>
import org.exolab.castor.mapping.Mapping;
import org.exolab.castor.mapping.MappingException;

import org.exolab.castor.xml.Unmarshaller;
import org.exolab.castor.xml.Marshaller;

import java.io.IOException;
import java.io.FileReader;
import java.io.OutputStreamWriter;

import org.xml.sax.InputSource;

public class main {

    public static void main(String args[]) {

        Mapping      mapping = new Mapping();

        try {
            <comment>// 1. Load the mapping information from the file</comment>
            mapping.loadMapping( "mapping.xml" );

            <comment>// 2. Unmarshal the data</comment>
            Unmarshaller unmar = new Unmarshaller(mapping);
            MyOrder order = (MyOrder)unmar.unmarshal(new InputSource(new FileReader("order.xml")));

            <comment>// 3. Do some processing on the data</comment>
            float total = order.getTotalPrice();
            System.out.println("Order total price = " + total);
            order.setTotal(total);

            <comment>// 4. marshal the data with the total price back and print the XML in the console</comment>
            Marshaller marshaller = new Marshaller(new OutputStreamWriter(System.out));
            marshaller.setMapping(mapping);
            marshaller.marshal(order);

        } catch (Exception e) {
            System.out.println(e);
            return;
        }
    }
}
            </code>
          </td>
        </tr>
      </table>


    </section>

    <section title="5. TODO">

      <p>Discuss about the use of XSI:type + xsi:type="java:xxx"</p>

    </section>
  </body>
</document>
