<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
     "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="jdo.howto.performance-tests">
    <sectioninfo>
      <title>How to run Castor JDO's performance tests</title>
<!--
      <abstract>
         <para>General information about running Castor JDO's performance tests</para>
      </abstract>
      
      Status: Final
-->
    </sectioninfo>

    <title>How to run Castor JDO's performance tests</title>
    
	<section id="jdo.howto.performance-tests.overview">
	  <title>Overview</title>
	  
      <para>At the time of this writing Castor JDO has 3 kinds of test suites:</para>
      
      <itemizedlist>
        <listitem><para>Database independend plan unit tests.</para></listitem>
        
        <listitem>
          <para>
            A JUnit based test suite that is used to test various functional areas 
            against different database engines to give developers/committers some 
            reassurance when changing the codebase.
          </para>
        </listitem>
        
        <listitem>
          <para>
            A Junit based test suite to evaluate impact of changes on performance.
          </para>
        </listitem>
      </itemizedlist>
      
      <para>This document provides general information about running Castor JDO's performance tests.</para>
    </section>
    
    <section id="jdo.howto.performance-tests.prerequisites">
      <title>Prerequisites</title>
      
      <para>
        See: <link linkend="jdo.howto.setup-eclipse-castor-project">How 
        to setup Castor project in eclipse</link>
      </para>
    </section>

    <section id="jdo.howto.performance-tests.setup-environment-for-old-ctf">
      <title>Steps to setup environment for old CTF</title>
      
      <para>
        To execute performance tests against mysql database you probably need access 
        to a mysql server. To create a database for PTF, you have to execute the 
        following commands on mysql console.
      </para>
        
      <programlisting>
# create database cpaptf;
# grant all on cpaptf.* at "localhost" to "test" identified by "test";
# use cpaptf;
# source <emphasis>[path-to-script]</emphasis>;</programlisting>

      <para>
        If the server is not installed on your local machine (the one you execute 
        the tests on) you have to replace "<literal>localhost</literal>" with the IP 
        of the machine the tests get executed on. The script to execute is
        "<filename>cpaptf/src/test/ddl/mysql.sql</filename>".
      </para>

      <para>
        As we do not include JDBC drivers for every database with Castor you also have 
        to add the driver you like to use to your classpath to execute the tests. 
        The easiest way is to copy the driver to 
        "<filename class="directory">lib/</filename>" directory as all jar's
        contained therein are added automatically.
      </para>

      <para>
        For mysql we still use "<literal>mysql-connector-java-3.1.13-bin</literal>", 
        also for <productname>mysql server</productname> of version 5. 
        This version has proven to be stable. While other versions of 
        <productname>mysql connector</productname> may also work, 
        some of them have bugs from our experience.
      </para>
    </section>

    <section id="jdo.howto.performance-tests.execute-in-eclipse">
      <title>Steps to execute performance tests in eclipse</title>
      
      <para>
        Execution of the performance test suite from within eclipse is very simple.
      </para>
        
      <itemizedlist>
        <listitem>
          <para>
            Select "<literal>cpaptf/src/test/java</literal>" 
            -> "<literal>org.castor.cpaptf</literal>" 
            -> "<filename>TestAll.java</filename>" and right click
          </para>
        </listitem>
        
        <listitem>
          <para>
            Select "<literal>Run As</literal>" -> "<literal>JUnit Test</literal>"
          </para>
        </listitem>
      </itemizedlist>
      
      <para>
        By default the test uses 2000 service objects that get created, loaded with 
        various configurations and deleted afterwards. Obviously this will take quite 
        some time. Please be patient for normal termination of the tests as you will 
        need to clean test tables by hand otherwise. To execute tests with a different 
        number of objects you can adjust "<constant>FACTOR</constant>" constant in 
        "<filename>TestCreate.java</filename>". For example, if you set 
        "<constant>Factor</constant>" to 1.0 the tests will be executed with 10000 
        service objects. When using more test objects be aware that you may need to 
        increase heap size of the virtual machine for the test to finish.
      </para>
      
      <para>
        By default you won't see any output of results on the console as logging level 
        of log4j is set to "warn" by default. But if you change log level of 
        "<package>org.castor.cpaptf</package>" package to "<literal>info</literal>" 
        you will see detailed execution times for every test on the console. 
        Be aware that there are quite some <filename>log4j.xml</filename> 
        configurations in the whole Castor project at the moment of which the one 
        first one on classpath will be used.
      </para>
        
      <para>
        If you like to review some older test results you will find them under 
        "<filename class="directory">cpaptf/src/site/resources/results/</filename>" 
        but they depend heavy on the machine you are running the tests on.
      </para>
    </section>
    
    <section id="jdo.howto.performance-tests.references">
      <title>References</title>
      
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="jdo.howto.setup-eclipse-castor-project">How to setup Castor 
            project in eclipse</link>
          </para>
        </listitem>
      </itemizedlist>
    </section>
</section>