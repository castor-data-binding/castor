<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
     "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
     
<section id="advanced-jdo.persist">
    <sectioninfo>
        <author>
            <firstname>Assaf</firstname>
            <surname>Arkin</surname>
            <email>arkin@intalio.com</email>
        </author>
<!-- 
       <abstract><para>
           Describes the Castor persistence engines architecture
       </para></abstract>
       Status: Preliminary Draft
-->
    </sectioninfo>
     
    <title>Castor Persistence Architecture</title>

    <section id="advanced-jdo.persist.layered-architecture">
        <title>Layered Achitecture</title>

        <para>
          The Castor persistence engine is based on a layer
          architecture allowing different APIs to be plugged on top of
          the system, and different persistence engines to be combined
          in a single environment.
        </para>
        
        <graphic align="center" format="PNG" fileref="images/persistence-layered-architecture.png" />
        
<!--    

        <table border="0" cellspacing="8" cellpadding="10" frame="all">
          <title>Architecture</title>
      
          <tgroup cols="1">
	        <tbody>
		      <row>
		          <entry>API</entry>
		          
		          <entrytbl align="center" cols="4" >
		            <tbody>
		              <row>
		                <entry align="center">EJB</entry>
		                <entry align="center">ODMG</entry>
		                <entry align="center">DAX</entry>
		                <entry align="center">JNDI</entry>
		              </row>
		            </tbody>
		          </entrytbl>
		      </row>
	            
	          <row>
	              <entry>Persistence</entry>
	              
		          <entrytbl align="center" cols="3">
		            <tbody>
		              <row>
		                <entry align="center">Transactions</entry>
		                
		                <entry align="center">Caching</entry>
		                
		                <entry align="center">Relations</entry>
		              </row>
		            </tbody>
		          </entrytbl>
		      </row>
	            
	          <row>
                  <entry>Service Providers</entry>
                  
		          <entrytbl align="center" cols="4">
		            <tbody>
		              <row>
		                <entry align="center">SQL 92</entry>
		                
		                <entry align="center">Oracle</entry>
		                
		                <entry align="center">Sybase</entry>
		                
		                <entry align="center">LDAP</entry>
		              </row>
		            </tbody>
		          </entrytbl>
		      </row>
	        </tbody>
          </tgroup>
        </table>

        --><para>
          At the top level are the application level APIs. These are industry standard APIs
          that allow an application to be ported in and to other environments. These APIs
          consist of interfaces as well as semantics that make them suitable for a particular
          type of applications.
        </para>    

        <para>
          At the medium level is the Castor persistence mechanism. The persistence 
          mechanism exposes itself to the application through the application level 
          APIs. These typically have a one to one mapping with the persistence 
          mechanism API. The persistence mechanism takes care of object caching and 
          rollback, locking and deadlock detection, transactional integrity, and two 
          phase commit.
        </para>    

        <para>
          At the bottom level are the Castor service providers. SPIs provide the 
          persistence and query support into a variety of persistence mechanism. 
          This version of Castor is bundled with an SQL 92 and LDAP persistence SPIs. 
          Additional SPIs can be added, for example, alternative engines streamlined 
          for Oracle, Sybase, DB2 and other databases.
        </para>    

        <para>
          This document will describe the persistence mechanism API and SPI to allow 
          for those interested in adding new top level APIs or service providers.
        </para>    
    </section>


    <section id="advanced-jdo.persist.api">
        <title>Persistence API</title>

        <para>
          The persistence mechanism is responsible for object caching and rollback, 
          locking and deadlock detection, transaction integrity and two phase commit. 
          All data access goes through the persistence mechanism. All operations are 
          performed in the context of a transaction, even if the underlying SPI does 
          not support transactions (e.g. LDAP).
        </para>    

        <para>
          The persistence API is defined in the package 
          <package>org.exolab.castor.persist</package>.
          The persistence mechanism implements the 
          <interface>org.exolab.castor.persist.PersistenceEngine</interface>
          interface, which allows objects to be loaded, created, deleted and locked 
          in the context of a transaction. The actual implementation is obtained from
          <classname>org.exolab.castor.persist.PersistenceEngineFactory</classname>.
        </para>    

        <para>
          All operations are performed through the context of a transaction. 
          A transaction is required in order to properly manage locking and caching, 
          and to automatically commit or rollback objects at transaction termination 
          (write-at-commit). Persistence operations are performed through the 
          <interface>org.exolab.castor.persist.TransactionContext</interface>
          interface.
        </para>    

        <para>
          The actual implementation of a transaction context is specific to each 
          application API and set of SPIs. One is created from an 
          <classname>org.exolab.castor.persist.XAResourceSource</classname>
          which abstracts the data source for the purpose of connection pooling and 
          XA transaction enlistment. A default implementation of 
          <interface>XAResource</interface> is available from
          <classname>org.exolab.castor.persist.XAResourceImpl</classname>.
        </para>    

      <section id="advanced-jdo.persist.api.transactions">
        <title>Transactions</title>

        <para>
           Every persistence operation is performed within the context of a transaction.
           This allows changes to objects to be saved when the transaction commits and 
           to be rolled back when the transaction aborts. Using a transactional API 
           relieves the application developer from worrying about the commit/rollback 
           phase. In addition it allows distributed transactions to be managed by a 
           transactional environment, such as an EJB server.
        </para>    

        <para>
           Each time an object is retrieved or created the operation is performed 
           in the context of a transaction and the object is recorded with the 
           transaction and locked. When the transaction completes, the modified 
           object is persisted automatically. If not all objects can be persisted, 
           the transaction rolls back. The transaction context implements full 
           two phase commit.
        </para>    

        <para>
           Each transaction sees it's own view of the objects it retrieves from 
           persistent storage. Until the transaction commit, these changes are 
           viewable only within that transaction. If the transaction rolled back, 
           the objects are automatically reverted to their state in persistent storage.
        </para>    

        <para>
           The transaction context 
           (<classname>org.exolab.castor.persist.TransactionContext</classname>)
           is the only mechanism by which the top level APIs can interact with the 
           persistence engine. A new transaction must be opened in order to perform 
           any operation.
        </para>    

        <para>
           A transaction context is not created directly, but through a derived class 
           that implements the proper mechanism for obtaining a new connection, 
           committing and rolling back the connection. Note that commit and rollback 
           operations are only required in a non-JTA environment. When running inside 
           a JTA environment (e.g. an EJB server), the container is responsible to 
           commit/rollback the underlying connection.
        </para>    

        <para>
           Application level APIs implement data sources that can be enlisted directly 
           with the transaction monitor through the JTA 
           <interface>XAResource</interface> 
           interface. A data source can be implemented using 
           <classname>org.exolab.castor.persist.XAResourceSource</classname>
           which serves as a factory for new transaction contexts and
           <classname>org.exolab.castor.persist.XAResourceImpl</classname> 
           which provides an <interface>XAResource</interface> implementation.
        </para>    
      </section>

      <section id="advanced-jdo.persist.api.oids-and-locks">
        <title>OIDs and Locks</title>

        <para>
           Each object participating in a transaction is associated with an object 
           identifier, or <emphasis role="bold">OID</emphasis> 
           (<classname>org.exolab.castor.persist.OID</classname>). 
           The OID identifies the object through its type and identity value. 
           The identity object must be unique across all OIDs for the same object type 
           in the same persistence engine.
        </para>    

        <para>
           Each object is also associated with a lock 
           (<classname>org.exolab.castor.persist.ObjectLock</classname>).
           An <emphasis role="bold">object lock</emphasis> supports read and write 
           locks with deadlock detection. Any number of transactions may acquire a 
           read lock on the object. Read lock allows the transaction to retrieve the 
           object, but not to delete or store it. Prior to deleting or storing the 
           object, the transaction must acquire a write lock. Only one transaction 
           may acquire a write lock, and a write lock will not be granted if there 
           is any read lock on the object.
        </para>    

        <para>
           If an object is loaded read-only, a read lock is acquired at the begin of 
           the load operation and realeased when the load is finished. Someone now 
           could ask why do you acquire a read lock at all if it only lasts during 
           the load operation. For an explanation we have to take a look on what 
           happens if an object is loaded. Loading one object from database may cause
           castor to load a whole tree of objects with relations to each other. 
           In the background castor may performs various queries to load all related 
           objects. For this object tree to be consistent and reflect the persistent 
           state of all the objects in the database at one point in time we need to 
           lock all objects involved in all load operations to prevent any involved 
           object to be write locked and changed by another transaction. If the load 
           operation is finished these read locks are not required anymore. On the 
           other hand, read locks are acquired to prevent an object already locked 
           in the write mode from getting the read lock.
        </para>    

        <para>
           Write locks are acquired at the begin of the load operation similar then 
           read locks. But in contrast to read locks, write locks are hold until the 
           transaction is commited or rolled back. Holding the write lock until the 
           end of the transaction is required as the changes to the objects, that 
           could happen anytime between begin and end of the transaction, are only 
           persisted if the transaction successfully commits.
        </para>    

        <para>
           If a transaction requires a read lock on an object which is write locked 
           by another transaction, or requires a write lock on an object which is read 
           or write locked by another transaction, the transaction will block until the 
           lock is released, or the lock timeout has elapsed. The lock timeout is a 
           property of the transaction and is specified in seconds. A
           <classname>org.exolab.castor.persist.LockNotGrantedException</classname> 
           is thrown if the lock could not be acquired within the specified timeout.
        </para>    

        <para>
           This locking mechanism can lead to the possibility of a deadlock. The object 
           lock mechanism provides automatic deadlock detection by tracking blocked 
           transactions, without depending on a lock wait to timeout.
        </para>    

        <para>
           Write locks and exclusive locks are always delegated down to the persistence 
           storage. In a distributed environment the database server itself provides 
           the distributed locking mechanism. This approach assures proper concurrency 
           control in a distributed environments where multiple application servers 
           access the same database server.
        </para>    
      </section>

      <section id="advanced-jdo.persist.api.cache-engine">
      <title>Cache Engine</title>

        <para>
           The concurrency engine includes a layer that acts as a cache engine. 
           This layer is particularly useful for implementing optimistic locking and 
           reducing synchronization with the database layer. It is also used to perform 
           dirty checks and object rollback. The cache engine is implemented in 
           <classname>org.exolab.castor.persist.CacheEngine</classname> and
           exposed to the application through the 
           <classname>org.exolab.castor.persist.PersistenceEngine</classname>.
        </para>    

        <para>
           When an object is retrieved from persistent storage it is placed in the 
           cache engine. Subsequent requests to retrieve the same object will return 
           the cached copy (with the exception of pessimistic locking, more below). 
           When the transaction commits, the cached copy will be updated with the 
           modified object. When the transaction rolls back, the object will be 
           reverted to its previous state from the cache engine.
        </para>    

        <para>
           In the event of any error or doubt, the cached copy will be dumped from 
           the cache engine. The least recently used objects will be cleared from 
           the cache periodically.
        </para>    

        <para>
           The cache engine is associated with a single persistence mechanism, 
           e.g. a database source, and LDAP directory. Proper configuration is 
           the only way to assure that all access to persistent storage goes 
           through the same cache engine.
        </para>    
      </section>

      <section id="advanced-jdo.persist.api.pessimistic-or-optimistic-locking">
        <title>Pessimistic/Optimistic Locking</title>

        <para>
           The concurrency engine works in two locking modes, based on the type of 
           access requested by the application (typically through the API). 
           Pessimistic locking are used in read-write access mode, optimistic locking 
           are used in exclusive access mode.
        </para>    

        <para>
           In <emphasis role="bold">optimistic locking mode</emphasis> it is assumed 
           that concurrent access to the same object is rare, or that objects are 
           seldom modified. Therefore objects are retrieved with a read lock and 
           are cached in memory across transactions.
        </para>    

        <para>
           When an object is retrieved for read/write access, if a copy of the object 
           exists in the cache, that copy will be used. A read lock will be acquired 
           in the cache engine, preventing other Castor transactions from deleting or 
           modifying the object. However, no lock is acquired in persistent storage, 
           allowing other applications to delete or modify the object while the Castor 
           transaction is in progress.
        </para>    

        <para>
           To prevent inconsistency, Castor will perform 
           <emphasis role="bold">dirty checking</emphasis> prior to storing the object, 
           detecting whether the object has been modified in persistent storage. 
           If the object has been modified outside the transaction, the transaction 
           will rollback. The application must be ready for that possibility, or 
           resort to using pessimistic locking.
        </para>    

        <para>
           In <emphasis role="bold">pessimistic locking mode</emphasis> it is assumed 
           that concurrent access to the same object is the general case and that 
           objects are often modified. Therefore objects are retrieved with a write 
           lock and are always synchronized against the persistence storage. When 
           talking to a database server, a request to load an object in exclusive mode 
           will always load the object (unless already loaded in the same transaction)
           using a <code>SELECT .. FOR UPDATE</code> which assures no other application 
           can change the object through direct access to the database server.
        </para>    

        <para>
           The locking mode is a property of the chosen access mode. The two access 
           modes as well as read-only access can be combined in a single transaction, 
           as a property of the query or object lookup. However, it is not possible 
           to combine access modes for the same object, in certain cases this will 
           lead to a conflict.
        </para>    

        <para>
           The pessimistic locking mode is not supported in LDAP and similar 
           non-transactional servers. LDAP does not provide a mechanism to lock 
           records and prevent concurrent access while they are being used in a 
           transaction. Although all Castor access to the LDAP server is properly 
           synchronized, it is possible that an external application will modify 
           or delete a record while that record is being used in a Castor transaction. 
        </para>    
      </section>

      <section id="advanced-jdo.persist.api.relations">
         <title>Relations</title>

         <para>TBD</para>

      </section>

      <section id="advanced-jdo.persist.api.queryresults">
         <title>QueryResults</title>

         <para>TBD</para>

      </section>
    </section>


    <section id="advanced-jdo.persist.spi">
      <title>Service Providers (SPI)</title>

      <para>
          Castor supports a service provider architecture that allows different 
          persistence storage providers to be plugged in. The default implementation 
          includes an SQL 92 provider and an and an LDAP provider. Additional 
          providers will be available optimized for a particular database server 
          or other storage mechanisms.
      </para>    

      <para>
          The service provider is defined through two interfaces, 
          <interface>org.exolab.castor.persist.spi.Persistence</interface>
          and <interface>org.exolab.castor.persist.spi.PersistenceQuery</interface>. 
          The first provides creation, deletion, update and lock services, 
          the second is used to process queries and result sets. Service providers 
          are obtained through the 
          <interface>org.exolab.castor.persist.spi.PersistenceFactory</interface>
          interface.
      </para>    
         
      <section id="advanced-jdo.persist.spi.persistence">
        <title>Persistence</title>

        <para>
           The interface 
           <interface>org.exolab.castor.persist.spi.Persistence</interface> defines 
           the contract between the persistence mechanism and a persistence service 
           provider. Each persistence storage (i.e. database server, directory server) 
           is associated with a single persistence engine, which in turn contains a 
           number of service providers, one per object type. Service providers are 
           acquired through a 
           <interface>org.exolab.castor.persist.spi.PersistenceFactory</interface> 
           interface, which is asked by each persistence engine to return 
           implementations for all the object types supported by that persistence 
           engine.
        </para>    

        <para>
           The object's identity is an object that unique identifies the object within 
           persistent storage. Typically this would be the primary key on a table, or 
           an RDN for LDAP. The identity object may be a simple type (e.g. integer, 
           string) or a complex type.
        </para>    

        <para>
           The service provider may support the stamp mechanism for efficiently 
           tracking dirty objects. The stamp mechanism is a unique identifier of 
           the persistent object that changes when the object is modified in 
           persistent storage. For example, a RAWID in Oracle or TIMESTAMP in Sybase. 
           If a stamp is return by certain operations it will be stored with the 
           object's OID and passed along to the store method.
        </para>    

        <para>
           The <methodname>create</methodname> method is called to create a new object 
           in persistent storage. This method is called when the created object's 
           identity is known. If the object's identity is not know when the object is 
           made persistent, this method will be called only when the transaction 
           commits. This method must check for duplicate identity with an already 
           persistent object, create the object in persistent storage, such that 
           successful completion of the transaction will result in durable storage, 
           and retain a write lock on that object for the duration of the transaction.
        </para>    

        <para>
           The <methodname>load</methodname> method is called to load an object from 
           persistent storage. An object is passed with the requested identity. If the 
           object is found in persistent storage, it's values should be copied into the 
           object passed as argument. If the lock flag is set, this method must create 
           a write lock on the object at the same time it loads it.
        </para>    

        <para>
           The <methodname>load</methodname> method is called in two cases, when an 
           object is first loaded or when an object is synchronized with the database 
           (reloaded) in exclusive access mode. In the second case this method will 
           be called with an object that is already set with values that are not 
           considered valued, and must reset these values.
        </para>    

        <para>
           The <methodname>store</methodname> method is called to store an object into 
           persistent storage. The store method is called for an object that was loaded 
           and modified during a transaction when the transaction commits, as well as 
           for an object that was created during the transaction. This method must 
           update the object in persistent storage and retain a write lock on that 
           object.
        </para>    

        <para>
           This method might be given two views of an object, one that is being saved 
           and one that was originally loaded. If the original view is provided as 
           well, this method should attempt to perform dirty check prior to storing 
           the object. Dirty check entails a comparison of the original object against 
           the copy in persistent storage, to determine whether the object has changed 
           in persistent storage since it was originally loaded. The class descriptor 
           will indicate whether the object is interested in dirty checking and which 
           of its fields should be checked.
        </para>    

        <para>
           The <methodname>delete</methodname> method is called to delete an object 
           from persistent storage. The delete method is called when the transaction 
           commits and expects the object to deleted, if it exists. This method is not 
           called when the transaction rolls back, objects created during the 
           transaction with the create method are automatically rolled back by the 
           persistent storage mechanism.
        </para>    

        <para>
           The <methodname>writeLock</methodname> method is called to obtain a write 
           lock on an object for which only a read lock was previously obtained. 
           The <methodname>changeIdentity</methodname> method is called to change 
           the identity of the object after it has been stored with the old identity.
        </para>    
      </section>


      <section id="advanced-jdo.persist.spi.persistencequery">
        <title>PersistenceQuery</title>

        <para>
           The interface 
           <interface>org.exolab.castor.persist.spi.PersistenceQuery</interface> 
           defines the contract between the persistence engine and a query mechanism.
        </para>
      </section>
    </section>


    <section id="advanced-jdo.persist.ejb-cmp">
      <title>Enterprise JavaBeans CMP</title>

      <para>TBD</para>
    </section>
</section>