<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document SYSTEM "document.dtd">
<document url="http://castor.exolab.org/types.xml">
  <body>
    <title>Type Support</title>

    <section title="Types">

      <p>The Castor type mechanism assures proper conversion between Java types and
         external types.
         </p>

      <section title="Castor XML">

        <p>Castor XML converts all Java fields into XML element and attribute values.
           </p>

      </section>

      <section title="Castor JDO">

        <p>Castor JDO converts Java fields into SQL columns which are persisted through
           the JDBC driver. Due to implementation details, the field type expected by
           the JDBC driver is not always the field type defined for the mapped object.</p>

        <p>The most common occurrences of mistyping is when using fields of type FLOAT,
           DOUBLE, NUMERIC and DECIMAL. SQL type FLOAT actually maps to Java type Double.
           SQL type NUMERIC and DECIMAL map to Java type BigDecimal.</p>

        <p>When such an inconsistency occurs, Castor JDO will throw an <tt>IllegalArgumentException</tt>
           during object persistence with a message indicating the two conflicting type.</p>

        <p>In order to avoid runtime exceptions we recommend explicitly specifying types in
           the mapping file using the SQL typing convention, see
           <a href="#SQL Type Conversion">SQL Type Conversion</a></p>

      </section>

      <section title="Castor DAX">

        <p>Castor DAX converts all Java fields into LDAP attribute values. LDAP attribute
           values are always textual and represented as the string value of the field,
           e.g. &quot;5&quot; or &quot;true&quot;.</p>

        <p>LDAP attributes may also contain binary values. When storing byte arrays or
           serialized Java objects, DAX will store them as byte arrays.</p>

      </section>

    </section>

    <section title="The Field Mapping">

      <p>The field element includes an optional attribute called <i>type</i> which can
         be used to specify the Java type of the field. This attribute is optional since
         Castor can always derive the exact Java type from the class definition.</p>

      <p>We highly recommend that developers use the type field in their mapping file as
         a means to provide static type checking. When loading a mapping file Castor will
         compare the actual Java type with the type specified in the mapping and complain
         about inconsistencies.</p>

      <p>The field type can be specified either given the full class name (e.g.
         <tt>java.lang.Integer</tt>) or using a short name. The following table lists all
         the acceptable short names and the Java types they represent:</p>

      <table border="1" cellpadding="4">
        <tr><td><b>Short Name</b></td><td><b>Java Type</b></td></tr>
        <tr><td>big-decimal</td><td>java.math.BigDecimal</td></tr>
        <tr><td>boolean</td><td>java.lang.Boolean</td></tr>
        <tr><td>byte</td><td>java.lang.Byte</td></tr>
        <tr><td>bytes</td><td>byte[]</td></tr>
        <tr><td>char</td><td>java.lang.Character</td></tr>
        <tr><td>chars</td><td>char[]</td></tr>
        <tr><td>date</td><td>java.util.Date</td></tr>
        <tr><td>double</td><td>java.lang.Double</td></tr>
        <tr><td>float</td><td>java.lang.Float</td></tr>
        <tr><td>integer</td><td>java.lang.Integer</td></tr>
        <tr><td>long</td><td>java.lang.Long</td></tr>
        <tr><td>short</td><td>java.lang.Short</td></tr>
        <tr><td>string</td><td>java.lang.String</td></tr>
        <tr><td>strings</td><td>java.lang.String[]</td></tr>
      </table>

    </section>

    <section title="SQL Type Conversion">

      <p>Castor JDO uses the JDBC <tt>getObject/setObject</tt> methods in order to
         retrieve and set fields. These methods do not perform automatic type
         conversion, often resulting in unexpected behavior. For example, when
         using a NUMERIC field with direct JDBC access, application developers
         tend to call <tt>getInteger()</tt> or <tt>getFloat()</tt>, but the
         Java object returned from a call to <tt>getObject</tt> is often a
         <tt>java.math.BigDecimal</tt>.</p>

      <p>Castor JDO implements automatic type conversion between Java and SQL.
         For this mechanism to work, the mapping file must specify the SQL type
         being used for Castor to employ the proper convertor. If no SQL type
         is specified, no conversion will occur, possibly resulting in an
         <tt>IllegalArgumentException</tt> being thrown.</p>

      <p>SQL types are specified with the <i>sql-type</i> attribute using either
         the default Java type returned by the JDBC driver (e.g. <tt>java.lang.Integer</tt>
         or the proper SQL type name (without precision). The following table lists
         the supported SQL type names and the corresponding Java types:</p>

      <table border="1" cellpadding="4">
        <tr><td><b>SQL Type</b></td><td><b>Java Type</b></td></tr>
        <tr><td>bigint</td><td>java.lang.Long</td></tr>
        <tr><td>binary</td><td>byte[]</td></tr>
        <tr><td>bit</td><td>java.lang.Boolean</td></tr>
        <tr><td>char</td><td>java.lang.String</td></tr>
        <tr><td>date</td><td>java.sql.Date</td></tr>
        <tr><td>decimal</td><td>java.math.BigDecimal</td></tr>
        <tr><td>double</td><td>java.lang.Double</td></tr>
        <tr><td>float</td><td>java.lang.Double</td></tr>
        <tr><td>integer</td><td>java.lang.Integer</td></tr>
        <tr><td>longvarbinary</td><td>byte[]</td></tr>
        <tr><td>longvarchar</td><td>java.lang.String</td></tr>
        <tr><td>numeric</td><td>java.math.BigDecimal</td></tr>
        <tr><td>real</td><td>java.lang.Float</td></tr>
        <tr><td>smallint</td><td>java.lang.Short</td></tr>
        <tr><td>time</td><td>java.sql.Time</td></tr>
        <tr><td>timestamp</td><td>java.sql.Timestamp</td></tr>
        <tr><td>tinyint</td><td>java.lang.Byte</td></tr>
        <tr><td>varbinary</td><td>byte[]</td></tr>
        <tr><td>varchar</td><td>java.lang.String</td></tr>
      </table>

      <p>The following example illustrates how to specify SQL type in field mapping:</p>
      <pre><![CDATA[
  <field name="prodId" type"integer">
    <sql name="prod_id" type="numeric"/>
  </field>]]>
      </pre>

    </section>

  </body>
</document>