<document url="http://castor.exolab.org/jdo-mapping.xml">
  <properties>
    <title>Castor JDO Mapping</title>
    <author email="ferret@frii.com">Bruce Snyder</author>
    <abstract>
    Outlines the use the Castor XML Mapping with regard to Castor JDO.
    </abstract>
    <status>Draft</status>
  </properties>

  <body>
    <title>Castor JDO Mapping</title>

    <section title="Introduction">

      <p>
      The Castor mapping file also provides a mechanism for binding a Java
      object model to a relational database model. This is usually referred to
      as object-to-relational mapping (O/R mapping). O/R mapping bridges the gap
      between an object model and a relational model.
      </p>

      <p>
      The mapping file provides a description of the Java object model to
      Castor JDO. Via Castor XML, Castor JDO uses the information in the mapping
      file to map Java objects to relational database tables. The
      following is a high-level example of a mapping file:
      </p>

      <code>
      &lt;mapping>
          &lt;class ... >
              &lt;map-to ... />
              &lt;field ... >
                  &lt;sql ... />
              &lt;/field>
              ...
          &lt;/class>
      &lt;/mapping>
      </code>

      <p>
      Each Java object is represented by a &lt;class> element composed of attributes,
      a &lt;map-to> element and &lt;field> elements. The &lt;map-to> element
      contains a reference to the relational table to which the Java object maps.
      Each &lt;field> element represents either a public class variable or a the
      variable's accessor/mutator methods (depending upon the mapping info). Each
      &lt;field> element is composed of attributes and one &lt;sql> element.
      The &lt;sql> element represents the field in the relational table to which
      the &lt;field> element maps.
      </p>

      <p>
      It is possible to use the mapping file and Castor's default behavior in
      conjunction. When Castor handles an object but is unable to locate
      information about it in the mapping file, it will rely upon its default
      behavior. Castor makes use of the Java programming language
      <a href="http://java.sun.com/j2se/1.4.1/docs/api/java/lang/reflect/package-summary.html">
      Reflection API</a> to introspect the Java objects to determine the methods
      to use. This is the reason some attributes are not required in the mapping
      file.
      </p>

    </section>

    <section title="The Mapping File">

      <section title="The &lt;mapping> element">

        <code>
          &lt;!ELEMENT mapping ( description?, include*, class*, key-generator* )>
        </code>

        <p>The &lt;mapping> element is the root element of a mapping file. It contains:</p>

        <ul>
          <li>an optional description</li>
          <li>zero or more &lt;include> which facilitates reusing mapping files</li>
          <li>zero or more &lt;class> descriptions: one for each class we intend to give
            mapping information</li>
          <li>zero or more &lt;key-generator>: not used for XML mapping</li>
        </ul>

        <p>A mapping file look like this:</p>

        <code>
        &lt;?xml version="1.0"?>
        &lt;!DOCTYPE mapping PUBLIC "-//EXOLAB/Castor Object Mapping DTD Version 1.0//EN"
                                 "http://castor.exolab.org/mapping.dtd">

        &lt;mapping>
                &lt;description>Description of the mapping&lt;/description>
                &lt;include href="other_mapping_file.xml"/>

                &lt;class name="A">
                        ...
                &lt;/class>

                &lt;class name="B">
                        ...
                &lt;/class>
        &lt;/mapping>
        </code>
      </section>

      <section title="The &lt;class> element">

        <code>
        &lt;!ELEMENT class ( description?, cache-type?, map-to?, field+ )>
        &lt;!ATTLIST class
                  name            ID       #REQUIRED
                  extends         IDREF    #IMPLIED
                  depends         IDREF    #IMPLIED
                  auto-complete   ( true |false ) "false"
                  identity        CDATA    #IMPLIED
                  access          ( read-only | shared | exclusive | db-locked )  "shared"
                  key-generator   IDREF    #IMPLIED >
        </code>


        <p>
        The  &lt;class> element contains all the information used to map a Java object
        to a relational database. The content of &lt;class> is mainly used to describe
        the fields that will be mapped.
        </p>

        <p>
        Description of the attributes:
        </p>

        <ul>
          <li><b>name:</b> The fully qualified package name of the Java object to map to.</li>

          <li><b>extends:</b> Should be used _only_ if this Java object extends another Java
          object for which mapping information is provided. It should _not_ be used if the
          extended Java object is not referenced in the mapping file.</li>

          <li><b>depends:</b> For more information on this field, please see
          <a href="castor-one.html#Dependent-and-related-relationships">
          Dependent and related relationships</a>.</li>

          <li><b>identity:</b> For more information on this field, please see
          <a href="design-persist.html#Persistence">Design -> Persistence</a>.</li>

          <li><b>access:</b> For more information on this field, please see
          <a href="locking.html#Locking-Modes">Locking Modes</a>.</li>

          <li><b>key-generator</b>: For more information on this field, please see
          <a href="key-generator.html">KeyGen</a>.</li>
        </ul>

        <p>Description of the elements:</p>

        <ul>
             <li><b>&lt;description></b>: An optional description.</li>

             <li><b>&lt;cache-type></b>: For more information on this field please see
             <a href="long-transact.html#Bounded-dirty-checking">Bounded Dirty Checking</a>
             and <a href="castor-one.html#LRU-Cache">LRU Cache</a>.</li>

             <li><b>&lt;map-to></b>: Used to tell Castor the name of the relational
             table to which to map.</li>

             <li><b>&lt;field></b>: Zero or more &lt;field> elements are used to describe properties
             of each Java object.</li>
        </ul>

      </section>

      <section title="The &lt;map-to> element">

        <code>
        &lt;!ELEMENT map-to EMPTY>
        &lt;!ATTLIST map-to
                  table      NMTOKEN  #IMPLIED
                  xml        NMTOKEN  #IMPLIED
                  ns-uri     NMTOKEN  #IMPLIED
                  ns-prefix  NMTOKEN  #IMPLIED
                  ldap-dn    NMTOKEN  #IMPLIED
                  ldap-oc    NMTOKEN  #IMPLIED>
        </code>

        <p>&lt;map-to> is used to specify the name of the item that should be associated
          with the given Java object. The &lt;map-to> element is only used for the root
          Java object.</p>

        <p>Description of the attributes:</p>

        <ul>
          <li><b>table:</b> The name of the relational database table to which the
          Java object is associated.</li>
        </ul>

      </section>


      <section title="The &lt;field> element">

        <code>
        &lt;!ELEMENT field ( description?, sql?, xml?, ldap? )>
        &lt;!ATTLIST field
                  name           NMTOKEN  #REQUIRED
                  type           NMTOKEN  #IMPLIED
                  required       ( true | false )  "false"
                  direct         ( true | false )  "false"
                  lazy           ( true | false )  "false"
                  transient      ( true | false )  "false"
                  get-method     NMTOKEN  #IMPLIED
                  set-method     NMTOKEN  #IMPLIED
                  create-method  NMTOKEN  #IMPLIED
                  collection     ( array | enumerate | collection | set | 
                                   arraylist | vector | map | hashtable )  #IMPLIED>
        </code>

        <p>The &lt;field> element is used to describe a property of a Java object. It provides:</p>
        <ul>
          <li>the identity ('name') of the property</li>
          <li>the type of the property (inferred from 'type' and 'collection')</li>
          <li>the access method of the property (inferred from 'direct', 'get-method', 'set-method')</li>
        </ul>

        <p>From this information, Castor is able to access a given property in the Java
          object.</p>

        <p>In order to determine the signature that Castor expects, there are two easy
          rules to apply.</p>

        <p><b>1. Determine &lt;type>.</b></p>

        <ul>
          <li><p><b>If there is no 'collection' attribute</b>, the object type is the value
          of the 'type' attribute. The value of the type attribute can be a fully qualified Java
          object like 'java.lang.String' or one of the allowed aliases:</p>

      <table border="1" cellpadding="4">
            <tr><th>short name</th><th>Primitive type?</th><th>Java Class</th></tr>
            <tr><td>big-decimal</td><td>N</td><td>java.math.BigDecimal</td></tr>
            <tr><td>big-integer</td><td>Y</td><td>java.math.BigInteger</td></tr>
            <tr><td>boolean</td><td>Y</td><td>java.lang.Boolean.TYPE</td></tr>
            <tr><td>byte</td><td>Y</td><td>java.lang.Byte.TYPE</td></tr>
            <tr><td>bytes</td><td>N</td><td>byte[]</td></tr>
            <tr><td>char</td><td>Y</td><td>java.lang.Character.TYPE</td></tr>
            <tr><td>chars</td><td>N</td><td>char[]</td></tr>
            <tr><td>clob</td><td>N</td><td>java.sql.Clob</td></tr>
            <tr><td>date</td><td>N</td><td>java.util.Date</td></tr>
            <tr><td>double</td><td>Y</td><td>java.lang.Double.TYPE</td></tr>
            <tr><td>float</td><td>Y</td><td>java.lang.Float.TYPE</td></tr>
            <tr><td>int</td><td>Y</td><td>java.lang.Integer.TYPE</td></tr>
            <tr><td>integer</td><td>Y</td><td>java.lang.Integer</td></tr>
            <tr><td>locale</td><td>N</td><td>java.util.Locale</td></tr>
            <tr><td>long</td><td>Y</td><td>java.lang.Long.TYPE</td></tr>
            <tr><td>other</td><td>N</td><td>java.lang.Object</td></tr>
            <tr><td>serializable</td><td>Y</td><td>java.io.Serializable</td></tr>
            <tr><td>short</td><td>Y</td><td>java.lang.Short.TYPE</td></tr>
            <tr><td>sqldate</td><td>Y</td><td>java.sql.Date</td></tr>
            <tr><td>sqltime</td><td>Y</td><td>java.sql.Date</td></tr>
            <tr><td>string</td><td>N</td><td>java.lang.String</td></tr>
            <tr><td>strings</td><td>N</td><td>String[]</td></tr>                
            <tr><td>stream</td><td>N</td><td>java.io.InputStream</td></tr>
            <tr><td>timestamp</td><td>N</td><td>java.sql.Timestamp</td></tr>
          </table>


      <p>Castor will try to cast the data in the mapping file to the proper Java 
            type.</p></li>


          <li><p><b>If there is a collection attribute</b>, the items in the following table can be
          used:</p>

            <table border="1" cellpadding="4">
              <tr><th>name</th><th>type</th><th>default implementation</th></tr>
              <tr><td>array</td><td>&lt;type_attribute>[]</td><td>&lt;type_attribute>[]</td></tr>
              <tr><td>enumerate</td><td>java.util.Enumeration</td><td>-</td></tr>
              <tr><td>collection</td><td>java.util.Collection</td><td>java.util.ArrayList </td></tr>
              <tr><td>set</td><td>java.util.Set</td><td>java.util.HashSet</td></tr>
              <tr><td>arraylist</td><td>java.util.ArrayList</td><td>java.util.ArrayList </td></tr>
              <tr><td>vector</td><td>java.util.Vector</td><td>java.util.Vector</td></tr>
              <tr><td>map</td><td>java.util.Map</td><td>java.util.HashMap</td></tr>
              <tr><td>hashtable</td><td>java.util.Hashtable</td><td>java.util.Hashtable</td></tr>
            </table>

            <p>The type of the object inside the collection is the 'type' attribute. The 'default
              implementation' is the type used if the object holding the collection is found
              to be null and needs to be instantiated.</p>

            <p>For hashtable and map, Castor will add an object using the put(object, object) 
            method - the object is both the key and the value. This will be improved in the future.</p></li>
        </ul>

        <p>It is necessary to use a collection when the content model of the element expects more 
        than one element of the specified type. This is how the 'to-many' portion of a relationship 
        is described.</p>


        <p><b>2. Determine the signature of the method</b></p>

        <li><p><b>If 'direct' is set to true</b>, Castor expects to find a public Java 
        object variable with the given signature:</p>

        <code>
        public &lt;type> &lt;name>;
        </code>
        </li>

        <li><p><b>If 'direct' is set to false or omitted</b>, Castor will access the property
        though accessor methods. Castor determines the signature of the accessors and mutators 
        as follows: If the 'get-method' or 'set-method' attributes are supplied, it will
        try to find a function with the following signature:</p>

        <code>
        public &lt;type> &lt;get-method>();
        </code>
        <p>or</p>
        <code>
        public void &lt;set-method>(&lt;type> value);
        </code>

        <p>If 'get-method' or 'set-method' attributes are not provided, Castor will try to
        find the following functions:</p>
	
		<code>	public void is&lt;capitalized-name>()/public &lt;type> get&lt;capitalized-name>();</code>
		
		<p>the former for boolean types, the latter for all other types (or if the 
		'is&lt;capitalized-name>()' method is not defined for a boolean type), and 
		a standard set method of</p>
        
        <code>	public void set&lt;capitalized-name>(&lt;type> value);</code>        
	
	    <p>If there are more than one set&lt;capitalized-name> method it first tries to find the one
        that exactly matches &lt;type>. If no such method is available and &lt;type> is a java
        primitive type it tries to find a method with the corresponing java object type.</p>
	
        <p>&lt;capitalized-name> means that Castor uses the &lt;name> attribute by changing its first
        letter to uppercase without modifying the other letters.</p>

        <p>The content of the &lt;field> element will contain the information about how to map 
        this field to the relational table.</p>
        </li>

        <p>Description of the attributes: </p>

        <ul>
          <li><b>name:</b> If 'direct' access is used, 'name' should be the name of a public
          variable in the object we are mapping (the field must be public, not
          static and not transient). If no direct access and no 'get-/set-method'
          is specified, this name will be used to infer the name of the accessor and 
          mutator methods.</li>

          <li><b>type:</b> The Java type of the field. This is used to access the
          field. Castor will use this information to cast the data type(e.g. string 
          into integer). It is also used to define the signature of the accessor and 
          mutator methods. If a collection is specified, this is used to specify the 
          type of the object inside the collection. See description above for more 
          details.</li>

          <li><b>required:</b> If true, the field is not optional.</li>

          <!--
          <li><b>transient:</b> If true, this field will be ignored during the
          marshalling. This is usefull in when used with the auto-complete
          option.</li>
          -->

          <li><b>direct:</b> If true, Castor expects a public variable in the object
          and will modify it directly.</li>

          <li><b>collection:</b> If a parent object expects more than one occurrence of
          one of its fields, it is necessary to specify which collection type Castor will 
          use to handle them. The type specified is used to define the type of the 
          content inside the collection.</li>

          <li><b>get-method:</b> An optional name of the accessor method Castor should 
          use. If this attribute is not set, Castor will try to guess the name with the
          algorithm described above.</li>


          <li><b>set-method:</b> An optional name of the mutator method Castor should 
          use. If this attribute is not set, Castor will try to guess the name with the
          algorithm described above.</li>

          <li><b>create-method:</b> Factory method for instantiation of the object.</li>
        </ul>

      </section>

      <section title="The &lt;sql> element">

          <p>
          <code>
          &lt;!ELEMENT sql EMPTY>
          &lt;!ATTLIST sql
              name        NMTOKENS  #IMPLIED
              type        NMTOKENS  #IMPLIED
              many-key    NMTOKENS  #IMPLIED
              many-table  NMTOKEN   #IMPLIED
              read-only   ( true | false )    "false"
              dirty       ( check | ignore )  "check">
  
          </code>
          </p>
  
          <p>
          The &lt;sql> element is used to denote information about the 
          database table to which a Java object is mapped. It should be declared 
          for all &lt;field> elements. Each &lt;field> element contains one &lt;sql> 
          element. The &lt;sql> element correlates directly to the &lt;map-to> 
          element for the containing &lt;class> element. The &lt;sql> elements 
          contains the following attributes: 

          <ul>
            <li><b>name:</b> The name of the column in the database table. 
            <!--
            This
            is the table name specified in the &lt;map-to> element, or the value of the
            many-table attribute in this &lt;sql> element when it is present.--></li>
  
            <li><b>type:</b> The JDBC type of the column. It is inferred from the object
            when the type of this field is a persistent Java class that is defined
            elsewhere in the mapping.  The complete list of automatic type conversions, and
            which values require manual mapping (e.g, java.util.Date) is listed in the
            <a href="types.html#SQL Type Conversion">SQL Type Conversion section of the 
            Type Support</a> document.</li>
  
            <li><b>read-only:</b> If true, the column in the relational database
            table will only be read, not updated or deleted.</li>
  
            <li><b>dirty:</b> If the value is 'ignore', the field will not be checked
            against the database for modification.</li>
          </ul>
          
          <p>There are two more attributes used <b>only</b> with 'to-many' relations.</p>
             
          <ul>
            <li><b>many-key:</b> Specifies the name of the column that holds the 
            foreign key to this object. That column is in the database table
            that stores objects of the Java type of this field.</li>
  
            <li><b>many-table:</b> Specifies the name of the bridge table that contains
            the primary keys of the object on each side of the relationship. This is <em>only</em>
            used for many-to-many relationships.</li>
          </ul>
          </p>

      </section>

    </section>


    <section title="Examples">

       <p>Here are examples of object mappings and the corresponding Java objects and
          DDL for the database table.</p>

       <section title="Java class files">
       
          <p>The following fragment shows the Java class declaration for the Product class:</p>
       
          <table border="1" cellpadding="4">
             <tr>
                <td BGCOLOR="#CCCCCC">
                   <code>
package myapp;

public class Product 
{
    private int       _id;

    private String    _name; 

    private float     _price; 

    private ProductGroup _group;


    public int getId() { ... }

    public void setId( int anId ) { ... }

    public String getName() { ... }

    public void setName( String aName ) { ... }

    public float getPrice() { ... }

    public void setPrice( float aPrice ) { ... }

    public ProductGroup getProductGroup() { ... }

    public void setProductGroup( ProductGroup aProductGroup ) { ... }
}
               </code>
            </td>
         </tr>
      </table>

      <p>The following fragment shows the Java class declaration for the ProductGroup class:</p>
      
      <table border="1" cellpadding="4">
              <tr>
                <td BGCOLOR="#CCCCCC">
                    <code>


public class ProductGroup
{

    private int       _id;

    private String    _name;

    public int getId() { ... }

    public void setId( int id ) { ... }

    public String getName() { ... }

    public void setName( String name ) { ... }

}
                  </code>
               </td>
            </tr>
         </table>
      </section>
        
       <section title="DDL">
       
          <p>The following sections show the DDL for the relational database tables 
             PROD, PROD_GROUP and PROD_DETAIL:</p>
        
          <p><b>PROD</b>:</p>
          
          <table border="1" cellpadding="4">
             <tr>
                <td BGCOLOR="#CCCCCC">
                   <code>
create table prod 
(
  id        int           not null,
  name      varchar(200)  not null,
  price     numeric(18,2) not null,
  group_id  int           not null
);
                   </code>
                </td>
             </tr>
          </table>

          <p><b>PROD_GROUP</b>:</p>
          
          <table border="1" cellpadding="4">
             <tr>
                <td BGCOLOR="#CCCCCC">
                   <code>
create table prod_group (
  id        int           not null,
  name      varchar(200)  not null
);
                   </code>
                </td>
             </tr>
          </table>
          
          <p><b>PROD_DETAIL</b>:</p>
          
          <table border="1" cellpadding="4">
             <tr>
                <td BGCOLOR="#CCCCCC">
                   <code>
create table prod_detail (
  id        int           not null,
  prod_id   int           not null,
  name      varchar(200)  not null
);
                   </code>
                </td>
             </tr>
          </table>
          
       </section>
       
       <section title="Object Mappings">

        <p>The following code fragment shows the object mapping for the ProductGroup class:</p>
           
        <table border="1" cellpadding="4">
            <tr>
                <td BGCOLOR="#CCCCCC">
                    <code>
&lt;?xml version="1.0"?>
&lt;!DOCTYPE mapping PUBLIC "-//EXOLAB/Castor Object Mapping DTD Version 1.0//EN"
                         "http://castor.exolab.org/mapping.dtd">
&lt;mapping>

  &lt;class name="myapp.ProductGroup" identity="id"&gt;
  
    &lt;description&gt;Product group&lt;/description&gt;
    
    &lt;map-to table="prod_group" xml="group" /&gt;
    
    &lt;field name="id" type="integer" &gt;
      &lt;sql name="id" type="integer"/&gt;
    &lt;/field&gt;
    
    &lt;field name="name" type="string"&gt;
      &lt;sql name="name" type="char" /&gt;
    &lt;/field&gt;
    
  &lt;/class>

&lt;/mapping>
                    </code>
                  </td>
              </tr>
        </table>

       <p>As a result of that declaration, Castor JDO would create the following SQL statements
          for creating, deleting, loading and updating instances of ProductGroup:</p>
          
       <table border="1" cellpadding="4">
         <tr>
           <td BGCOLOR="#CCCCCC">
             <code>
create: INSERT INTO prod_group (id, name) VALUES (?,?)
delete: DELETE FROM prod_group WHERE id=?
load:   SELECT prod_group.id, prod_group.name FROM prod_group WHERE prod_group.id=?;
update: UPDATE prod_group SET name=? WHERE id=?
             </code>
           </td>
         </tr>
       </table>
          
       <section title="Read-only fields">

          <p>To declare the <i>name</i> field <b>read-only</b>, above field definition for the 
             field <i>name</i> needs to be changed to:</p>

          <code-panel>
             <code>
  &lt;class name="myapp.ProductGroup" identity="id"&gt;
  
    ...    
    &lt;field name="name" type="string"&gt;
      &lt;sql name="name" type="char" <font color="red">read-only="true"</font> /&gt;
    &lt;/field&gt;
    
  &lt;/class>
             </code>
          </code-panel>
         
          <p>As a result of that declaration, Castor JDO creates the following SQL statements
            for creating, deleting, loading and updating instances of ProductGroup:</p>
          
          <code-panel> 
             <code>
create: INSERT INTO prod_group (id) VALUES (?)
delete: DELETE FROM prod_group WHERE id=?
load:   SELECT prod_group.id, prod_group.name FROM prod_group WHERE prod_group.id=?;
update: <i>no statement will be generated</i>
             </code>
          </code-panel> 
         
       </section>

<!--
       <section title="Transient fields">

          <p>To declare the <i>name</i> field <b>transient</b> with regards to persistence, above field 
             definition for the field <i>name</i> needs to be changed to:</p>

          <code-panel>
             <code>
  &lt;class name="myapp.ProductGroup" identity="id"&gt;
  
    ...    
    &lt;field name="name" type="string" &gt;
      &lt;sql name="name" type="char" <font color="red">transient="true"</font> /&gt;
    &lt;/field&gt;
    
  &lt;/class>
             </code>
          </code-panel>

       </section>
    
-->
          
       <section title="1:1 relation">

          <p>The following code fragment shows the mapping file for the Product class. 
             Apart from the simple field declarations, this includes a simple 1:1 relation between 
             Product and ProductGroup, where every product instance is associated with a 
             ProductGroup:</p>

          <code-panel>
             <code>
    ...
    &lt;class name="myapp.Product" identity="id"&gt;

        &lt;map-to table="prod" /&gt;

        &lt;field name="id" type="integer">
            &lt;sql name="id" type="integer" />
        &lt;/field>

        &lt;field name="name" type="string">
            &lt;sql name="name" type="char" />
        &lt;/field>

        &lt;field name="price" type="float">
            &lt;sql name="price" type="numeric" />
        &lt;/field>

        <font color="red">&lt;field name="group" type="myapp.ProductGroup" &gt;
            &lt;sql name="group_id" /&gt;
        &lt;/field&gt;</font>
        
        &lt;field name="details" type="myapp.ProductDetail"
               collection="vector"&gt;
           &lt;sql many-key="prod_id"/&gt;
        &lt;/field&gt;
        
        &lt;field name="categories" type="myapp.Category" collection="vector"&gt;
           &lt;sql name="category_id"
                many-table="category_prod" many-key="prod_id" /&gt;
        &lt;/field&gt;

    &lt;/class&gt;
    ...
             </code>
          </code-panel>
       </section>
       
          <section title="1:M relation">
             <p>The following code fragment shows (again) the mapping file for the Product class. 
                The field definition highlighted shows how to declare a 1:M relation between 
                Product and ProductDetail, where every product instance is made up of many 
                ProductDetails:</p>
                
             <code-panel>
                <code>
    ...
    &lt;class name="myapp.Product" identity="id"&gt;

        &lt;map-to table="prod" /&gt;

        &lt;field name="id" type="integer">
            &lt;sql name="id" type="integer" />
        &lt;/field>

        &lt;field name="name" type="string">
            &lt;sql name="name" type="char" />
        &lt;/field>

        &lt;field name="price" type="float">
            &lt;sql name="price" type="numeric" />
        &lt;/field>

        &lt;field name="group" type="myapp.ProductGroup" &gt;
            &lt;sql name="group_id" /&gt;
        &lt;/field&gt;
        
        <font color="red">&lt;field name="details" type="myapp.ProductDetail" <font color="red">collection="vector"</font>&gt;
           &lt;sql many-key="prod_id"/&gt;
        &lt;/field&gt;</font>

        &lt;field name="categories" type="myapp.Category" collection="vector"&gt;
           &lt;sql name="category_id"
                many-table="category_prod" many-key="prod_id" /&gt;
        &lt;/field&gt;
    &lt;/class&gt;
    ...
                </code>
             </code-panel>
             
             <p>The following code fragment shows the corresponding mapping entry for the 
                ProductDetail class that defines the second leg of the 1:M relation
                between Product and ProductDetail.</p>
                
             <code-panel>
                <code>
  ...
  &lt;class name="myapp.ProductDetail" identity="id" depends="myapp.Product" &gt;

    &lt;description&gt;Product detail&lt;/description&gt;

    &lt;map-to table="prod_detail" xml="detail" /&gt;

    &lt;field name="id" type="integer"&gt;
      &lt;sql name="id" type="integer"/&gt;
    &lt;/field&gt;

    &lt;field name="name" type="string"&gt;
      &lt;sql name="name" type="char"/&gt;
    &lt;/field&gt;

    <font color="red">&lt;field name="product" type="myapp.Product"&gt;
      &lt;sql name="prod_id" /&gt;
    &lt;/field&gt;</font>

  %lt;/class&gt;
  ...
                </code>
             </code-panel>
 
          </section>
       
          <section title="M:N relation">
             <p>The following code fragment shows (again) the mapping file for the Product class. 
                The field definition highlighted shows how to declare a M:N relation between 
                Product and ProductCategory, where many products can be mapped to many 
                product categories:</p>
                
             <code-panel>
                <code>
    ...
    &lt;class name="myapp.Product" identity="id"&gt;

        &lt;map-to table="prod" /&gt;

        &lt;field name="id" type="integer">
            &lt;sql name="id" type="integer" />
        &lt;/field>

        &lt;field name="name" type="string">
            &lt;sql name="name" type="char" />
        &lt;/field>

        &lt;field name="price" type="float">
            &lt;sql name="price" type="numeric" />
        &lt;/field>

        &lt;field name="group" type="myapp.ProductGroup" &gt;
            &lt;sql name="group_id" /&gt;
        &lt;/field&gt;
        
        &lt;field name="details" type="myapp.ProductDetail" collection="vector"&gt;
           &lt;sql many-key="prod_id">/&gt;
        &lt;/field&gt;

        <font color="red">&lt;field name="categories" type="myapp.Category" collection="vector"&gt;
           &lt;sql name="category_id"
                many-table="category_prod" many-key="prod_id" /&gt;
        &lt;/field&gt;</font>
        
    &lt;/class&gt;
    ...
                </code>
             </code-panel>
             
             <p>The following code fragment shows the corresponding mapping entry for the 
                ProductCategory class that defines the second leg of the M:N relation
                between Product and Category.</p>

             <code-panel>
                <code>
  ...
  &lt;class name="myapp.Category" identity="id"&gt;
  
    &lt;description&gt;
        A product category, any number of products can belong to
        the same category, a product can belong to any number of
        categories
    &lt;/description&gt;
    
    &lt;map-to table="category" xml="category" /&gt;
    
    &lt;field name="id" type="integer"&gt;
      &lt;sql name="id" type="integer"/&gt;
    &lt;/field&gt;
    
    &lt;field name="name" type="string"&gt;
      &lt;sql name="name" type="char"/&gt;
    &lt;/field&gt;
    
    <font color="red">&lt;field name="products" type="myapp.Product" collection="vector"&gt;
      &lt;sql name="prod_id"
           many-table="category_prod" many-key="category_id" /&gt;
    &lt;/field&gt;</font>
    
  &lt;/class&gt;
  ...
                </code>
             </code-panel>
          </section>

       </section>

    </section>

  </body>
</document>
