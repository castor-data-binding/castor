<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
     "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="jdo.howto.distributed-transactions">
    <sectioninfo>
        <title>How to use Castor with(in) distributed J2EE transactions</title>
<!--
        <abstract>
            General information about using Castor with(in) distributed J2EE transactions
        </abstract>
        <status>Final</status>
-->
    </sectioninfo>

    <title>How to use Castor with(in) distributed J2EE transactions</title>

    <section id="jdo.howto.distributed-transactions.overview">
        <title>Overview</title>
        
        <para>
            J2EE applications depend on the J2EE container (hosting Servlet, EJB, etc) 
            to configure a database connection (as well as other resource managers) 
            and use JNDI to look it up. This model allows the application deployer 
            to configure the database properties from a central place, and gives the 
            J2EE container the ability to manage distributed transactions across 
            multiple data sources.
        </para>
           
        <para>
            This HOW-TO shows how to seamlessly use 
            <application>Castor JDO</application> in such a managed environment, 
            and how to make <application>Castor</application> participate in a 
            distributed transaction.
        </para>
    </section>
    
    
    <section id="jdo.howto.distributed-transactions.intended-audience">
        <title>Intended audience</title>
        
        <para>
            Anyone who wants to use <application>Castor JDO</application> with(in) 
            distributed J2EE transactions.
        </para>
    </section>
    
    
    <section id="jdo.howto.distributed-transactions.steps">
        <title>Steps</title>
        
        <para>
            The following sections highlight the steps necessary to use 
            <application>Castor JDO</application> seamlessly in such a (managed) 
            environment, and how to make <application>Castor</application> participate 
            in a distributed transaction.
        </para>

        <section id="jdo.howto.distributed-transactions.steps.j2ee-participation">
            <title>Make Castor participate in a J2EE transaction</title>

            <para>
                The following code fragment shows how to use JNDI to lookup a database 
                and how to use a JTA <classname>UserTransaction</classname> instance 
                to manage the J2EE (aka distributed) transaction:
            </para>
           
		    <programlisting language="java">
// Lookup databse in JNDI
Context ctx = new InitialContext();
Database db = (Database) ctx.lookup( "java:comp/env/jdo/mydb" );

// Begin a transaction
UserTransaction ut = (UserTransaction) ctx.lookup( "java:comp/UserTransaction" );
ut.begin();
// Do something
. . .
// Commit the transaction, close database
ut.commit();
db.close();
            </programlisting>
        </section>
      
      
        <section id="jdo.howto.distributed-transactions.steps.container-managed">
            <title>Make Castor participate in container-managed J2EE transaction</title>
        
            <para>
                If the transaction is managed by the container, a common case with 
                EJB beans and in particular entity beans, there is no need to 
                begin/commit the transaction explicitly. Instead the application 
                server takes care of enlisting the database used by 
                <application>Castor JDO</application> to insert domain entities into 
                a database in the ongoing transaction and commiting/rolling back at 
                the relevant time.
            </para>

            <para>
                The following code snippet relies on the container to manage the 
                transaction.
            </para>
            <programlisting language="java">
InitialContext  ctx;
UserTransaction ut;
Database        db;

// Lookup databse in JNDI
ctx = new InitialContext();
db = (Database) ctx.lookup( "java:comp/env/jdo/mydb" );

// Do something
. . .
// Close the database
db.close();
            </programlisting>
           
            <para>
                As transaction enregistration is dealt with at the J2EE container, 
                it is not necessary anymore to obtain a 
                <classname>UserTransaction</classname> and start/commit the transaction 
                manually.
            </para>
        </section>
      
      
        <section id="jdo.howto.distributed-transactions.steps.resource-enlisting">
            <title>Resource enlisting</title>
        
            <para>
                Instead of constructing required resources directly, a typical J2EE 
                application uses the JNDI API to look up resources from centrally 
                managed place such as a naming and directory service. In such an 
                environment, <application>Castor JDO</application> takes on the role 
                of a managed resource as well. It follows that, instead of constructing 
                a <classname>org.exolab.castor.jdo.JDOManager</classname> directly, 
                a typical J2EE application should use <application>JNDI</application> 
                to look it up.
            </para>
           
            <para>
                We thus recommend enlisting the <classname>JDOManager</classname> 
                object under the <literal>java:comp/env/jdo</literal> namespace, 
                compatible with the convention for listing JDBC resources.
            </para>
        </section>
    </section>
	 
	 
	<section id="jdo.howto.distributed-transactions.tips">
        <title>Tips</title>
		
		<itemizedlist>
			<listitem>
			    <para>
			        When using <application>Castor JDO</application> in a J2EE 
			        environment, <application>Castor</application> allows you to 
			        enable a special Database instance pooling support. 
			        This option is configured via the 
			        <methodname>org.exolab.castor.jdo.JDOManager.setDatabasePooling(boolean)</methodname>
				    method; by default, it is turned off. This option only affects 
				    <classname>JDOManager</classname> if J2EE transactions are used 
				    and if a transaction is associated with the thread that calls 
				    {@link #getDatabase}.
				</para>
				
				<para>
				    If database pooling is enabled, <classname>JDOManager</classname> 
				    will first search in this special pool to see if there is already 
				    a <classname>org.exolab.castor.jdo.Database</classname> instance 
				    for the current transaction. If found, it returns this 
				    <classname>org.exolab.castor.jdo.Database</classname> instance; 
				    if not, it creates a new one, associates it will the transaction 
				    and returns the newly created 
				    <classname>org.exolab.castor.jdo.Database</classname> instance.
				 </para>
				 
				 <para>
				     Please make sure that you call this method before calling 
				     {@link #getDatabase}.
				 </para>
		    </listitem>
		</itemizedlist>
	</section>


    <section id="jdo.howto.distributed-transactions.references">
        <title>References</title>
         
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="advanced-jdo.pooling">Other pooling examples</link>
                </para>
            </listitem>
        </itemizedlist>
    </section>
</section>