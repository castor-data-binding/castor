<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://castor.exolab.org/castor-one.xml">
  <body>
    <title>Using new features in castor 0.9 (Beta)</title>

    <header>
      <p>Reference: <api package="org.exolab.castor.jdo">The Java Data Objects API</api></p>
    </header>

	<!--
    <section title="What is Castor JDO">
	<p>
	   Castor JDO is an Object-Relational Mapping and Data-Binding Framework, which is written in 100% pure Java[tm]. Castor can map relational database data into Java Data Object based on user-defined mapping schema. In the other point-of-view, it provides java data objects a persistence layer. </p>

        <p>
	   It frees programmer from dealing with database directly and replacing the entire burden of composing updating the database. Proper SQL statements are automatically generated for loading, updating, creating and deleting. Changes to object in transaction automatically done to data source at commit time. Thus programmer can stay in pure-Java and without remember all the details in the backing database, after the creation of database tables and the mapping schema. The separation of persistence and programming logic also enable much clearer object-oriented design, which is important in larger projects. </p>
    </section>-->

    <section title="What is in Castor JDO 0.9">
        <p>
	   Castor JDO is transactional. Data objects loaded in Castor are properly locked and isolated from other transactions. The transaction context implements full two phases commit. Read-only object and long transaction is supported beside regular synchronized transaction. Deadlock detection is built-in and dirty checking is preformed before data is persisted. Thus, data integrities are constrained and unnecessary database updates are reduced. OQL can be used for query data object. Different LRU mechanisms can be used for data caching to reduce database accesses. </p>

        <p>
	   Castor supports different cardinalities of relationship, including one-to-one, one-to-many and many-to-many. It also supports extended object and database record. It distinguishes between related and dependent relationship for object life cycle. Multiple-columns primary key is ready and different variety of key generators are also implemented. </p>

	<p>
	   Users have choices on different collection types (targetted). Lazy loading of collections is implemented to reduce unnecessary database loading and can be turn on or off for each individual field of any supproted collection type. </p>
	   
	<p>
	   Other features includes type converter for different primitive types. No pre-processor or class enhancer is needed or used for data-binding and object persistence. Custom ClassDescriptor for faster java data object field access (will put back soon). Castor JDO works in multiple ClassLoaders environment. Call back interface, namely Persistent, can be implemented if the object interested to get notified on events such as jdoLoad(), jdoCreate(), jdoRemove() and jdoTransient(). </p>

        <p>
	   Also, Java-XML Data-Binding Framework (Castor XML) has been merged with Castor JDO for users who need both O/R Mapping and Java-XML Data-Binding together. </p>
	   
	<p>
	   Different relation databases are supported; it includes Oracle 8.1.x and different versions of Sybase Enterprise and Anywhere. User can implement the Driver interface to adopt the different in SQL syntax among different relation database, as long as the database support JDBC 2.0, multiple ResultSet and transaction. Thank for many individual open source contributors, drivers for different database are available. [Links for all features will be added]</p>
    </section>

    <section title="LRU Cache">
        <p>
	   Castor maintains and properly locks one copy of dirty checking cache for each object it load from or create into a persistence storage. Until all transaction involving with the object is completed (See Design: Persistence), the cache is released. Starting from Castor 0.8.6, performance cache is implemented and developer can specify the mechanism and capacity of performance cache for each persistence capable type. Options includes none, count-limited, time-limited and unlimited. Performance cache is write-through, because all changes to objects of a transaction should be persisted at commit time without delay. </p>

	<p>
	   Performance cache options do not affect the behavior of short transaction or locking. Nor the options affect dirty checking cache, because they’re maintained separately. It only affects persistence object that is freed from any transaction. Performance cache enhances the performance by reducing the number of read operations done to persistence storage, using the last read or committed valued of the object. </p>

	<p>
	   Performance cache is also duded purpose as dirty checking cache for long transaction. The time, which the cache of the object stays in memory, determines the allowed time span of a long transaction. ObjectModifedException will be thrown if an application trys to update an object that is disposed from performance cache. See the document “long-trans.html” for details. </p>

    
        <p>The DTD declaration is as the following:
 	    <code>
&lt;!ATTLIST cache-type
	type     ( none | count-limited | time-limited | unlimited ) "count-limited"
	capacity NMTOKEN #IMPLIED>
	    </code>
        </p>

       <p>For example,
           <code>
&lt;mapping>
    &lt;class name=”com.xyz.MyObject”>
        &lt;cache-type type=”time-limited” capacity=”30”>
            &lt;field name= ... />
               ...
        &lt;/>
    &lt;/>
&lt;/>
           </code>
          defines time-limited least-recently-used algorithm as the caching algorithm for <i>com.xyz.MyObject</i> class and the cache will be disposed if it is not used within 30 second. (Note that the time-limit ticks after all transaction involved with the objects complete, but not start after it is loaded) </p>
    </section>
    <section title="Dependent and related relationships">
          <p>
	     Castor distinguishes relationship of two objects as dependent or related, and maintains the life cycle differently for the two types of relationships. Starting from Castor 0.9, developer can explicitly define dependent relationship in the mapping file. </p>

	  <p>
	     Related objects’ life cycle is independent to each other. Meaning that they have to be created, removed and updated (for long transaction) independently. </p>

          <p>
	     In dependent relation, one data object class must de declared as depends on one other data object class in the mapping file, and such object is called a dependent data object class. A data object class without <i>depends</i> declared in the mapping is called master object. A master object can be depended by zero or more dependent data object class. </p>

	  <p>
	     As of Castor 0.9, dependent object can be related to other master data object classes including extended classes. </p>

	  <p>
	     If an object class declared as <i>depends</i> on other class, it may not be created, removed or updated separately. Attempting to create, remove or update an independent object will be result in ObjectNotPersistcapableException. A note is that Castor doesn’t allow an independent object to change its master object change its master data object instance during a transaction, and each dependent object can has only one master object. Both dependent and master object must have identities, and may or may not associate with key-generators. </p>

	  <p>
	     Here is the DTD for declaring dependent object:
	         <code>
&lt;!ATTLIST class     name ID  #REQUIRED
             extends   IDREF    #IMPLIED
             depends   IDREF    #IMPLIED
             identity  CDATA   #IMPLIED
             access    ( read-only | shared | exclusive | db-locked )  "shared"
             key-generator   IDREF #IMPLIED>
	         </code></p>

          <p>
             For example,
	          <code>
&lt;mapping>
    &lt;class name=”com.xyz.MyDependentObject” depends=”com.xyz.MyObject”>
        ...
    &lt;/>
&lt;/>
                  </code>
             declares the data object classes of <i>com.xyz.MyDependentObject</i> as a dependent class of <i>com.xyz.MyObject</i>.</p>
    </section>
    <section title="Different cardinalities of relationship">
         <p>
	     Castor supports different cardinalities ratio of relationship, namely one-to-one, one-to-many, and many-to-many. Many-to-many is new to Castor 0.9. Many-to-many relationship must be related, because each dependent object can have only one master object. </p>

	 <p>
	     Many-to-many requires a separate table for storing the relations between two types of objects. Many-to-many introduces two attributes, namely many-key and many-table in &lt;sql> elements under &lt;field>. For all many-to-many relation, many-table must be specified. If the column name of the primary key of the class is different from the foreign keys columns of the class in the relation tables, then the relation table columns can be specified using the many-key attributes. Similarly, if the column name of the primary key of the related class is different from the foreign key columns of the related class, then the relation table columns can be specified using the name attribute. </p>

	 <p>
	    For many-table, (relations are stored in a separated relation table) 
              <code>
&lt;mapping>
    &lt;class>
        &lt;field>
            &lt;sql many-key="#OPTIONAL" many-table="#REQURIED"
            name="#OPTIONAL">
        &lt;/>
    &lt;/>
&lt;/>
               </code></p>
          <p>
	     So, for example if your SQL table is the following,
<center>
<b>employee_table</b></center>

<center><table BORDER="true" COLS="3" WIDTH="60%" >
    <tr ALIGN="CENTER">
        <td><b>id</b></td>   <td><b>name</b></td>      <td><b>salary</b></td>
    </tr>

    <tr>
        <td>1482</td>        <td>Smith, Bob</td>       <td>$123,456</td>
    </tr>

    <tr>
        <td>628</td>         <td>Lee, John</td>        <td>$43,210</td>
    </tr>

    <tr>
        <td>1926</td>        <td>Arnold, Pascal</td>   <td>$24,680</td>
    </tr>
</table></center>

<center>
<b>department_table</b></center>

<center><table BORDER="true" COLS="3" WIDTH="60%" >
    <tr ALIGN="CENTER">
        <td><b>id</b></td>   <td><b>name</b></td>      <td><b>comment</b></td>
    </tr>

    <tr>
         <td>3</td>          <td>Accounting</td>       <td></td>
    </tr>

    <tr>
         <td>7</td>          <td>Engineering</td>      <td>The very important department. :-)</td>
    </tr>
</table></center>

<center>
<b>employee_department</b></center>

<center><table BORDER="true" COLS="2" WIDTH="40%" >
    <tr ALIGN="CENTER">
         <td><b>e_id</b></td>  <td><b>d_id</b></td>    
    </tr>

    <tr>
         <td>....</td>         <td>....</td>
    </tr>
</table></center>
        </p>

        <p>
	   Then, the mapping for employee data object would look like that, 
	       <code>
&lt;mapping>
    &lt;class name=”com.xyz.Employee” identity=”id”>
        &lt;map-to table=”employee_table”/>
            &lt;field name=”id” type=”integer”>
                &lt;sql name=”id”/>
            &lt;/field>
            &lt;field>
                &lt;sql many-table=”employee_department” many-key=”e_id” name=”d_id”/>
            &lt;/field>
            field name=”salary”>
                &lt;sql name=”salary” type=”integer”>
            &lt;/>
        &lt;/>
    &lt;/>
&lt;/>
               </code>
	 </p>
    </section>

    <section title="Lazy Loading">
        <p>
           Lazy loading of collection is also a new to castor 0.9. (As of writing, only java.util.Collection is supported. But, java.util.Set, java.util.HashMap etc will be added soon.) The elements in the collection is only loaded when the application ask for the object from the collection, for example using iterator.next(). (The iterator in castor’s lazy collection is optimized and it will return loaded object first.) Lazy loading can be applied to both one-to-many and many-to-many relationship. </p>

	<p>
	   In mapping file, lazy loading is specified in the element of the collection’s <i>&lt;field></i>, for example,
	       <code>
&lt;mapping>
    &lt;class name=”com.xzy.Department”>
       ...
        &lt;field name=”com.xyz.Employee” collection=”collection” lazy=”true”/>
    &lt;/>
&lt;/>        </code>
            declares that the collection of employee in a department is lazy loaded. </p>
	    
	<p>
	    If lazy loading is specified for a field of a class, Castor will set the fields with a special collection which contains only the identities of the objects. Because of that, it requires the data object to have the method setDepartment( Collection department ) in the data object class which is not required in previous versions. </p>

     </section>
     <section title="Mutliple columns primany keys">
        <p>
	    The support of multiple columns primary keys is another major enhancement added into Castor 0.9. Specifying multiple primary keys is simple and straightforward, in the mapping file,
	       <code>
&lt;mapping>
    &lt;class name=”com.xyz.MyObject” identity=”firstName lastName”>
        &lt;field name=”firstName” type=”string”>
           &lt;sql name=”fname”/>
        &lt;/>
        &lt;field name=”lastName” type=”string”>
           &lt;sql name=”lname”/>
        &lt;/>
        &lt;field  ... />
           ...
    &lt;/>
&lt;/>
               </code>
	</p>
        <p>
	   Multiple primary keys work with both master and dependent object, all cardinality ratio of relationship, including one-to-one, one-to-many and many-to-many as well as lazy loading. </p>

        <p>
	   However, when designing a new database, user is advised not to use identity or identities which would be changed. For example, if the system allow user name to be changed, using user name as identity is highly discouraged. First, castor doesn’t support identity change, as ODMG specified. Second, in relational database, most primary key of one table is a foreign key in some other. So, primary keys changes are almost certainly a large trade off between data integrity and performance. Alternative is using an numeric id instead of multiple primary keys instead. Also, single column primary key is faster for joining operations. </p>
      </section>
   </body>
</document>