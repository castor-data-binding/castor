<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://castor.org/howto/how-to-use-cascading-operations.xml">
	<properties>
		<title>How to cascade creation</title>
		<abstract>
			Describes the various possibilities Castor provides to cascade creation
		</abstract>
		<status>Draft</status>
	</properties>
	<body>
		<title>How to cascade creation</title>
		<header>
		</header>

		<section title="Overview">

			<p>Cascading creation allows you to transfer some of the responsibilities of creating objects to Castor.
			  To be more precise: if you enable cascading creation on a relationship, all objects on one end of that
			  relationship, that have not yet been created, will be created when the other end gets persisted.
			  This saves you from manually creating every single object, which is especially useful when dealing with
			  large object graphs that have many relationships or many objects in a single relationship.</p>			  

		</section>

		<section title="Enabling cascading creation">

			<p>To enable cascading creation on a relationship you simply set the cascading attribute of the &lt;sql&gt; field
			  describing the relation to "create" (or "all"):</p>

			<code-panel><![CDATA[
<field name="book" type="myapp.Book" >
  <sql name="book_id" cascading="create" />
</field>
]]></code-panel>

    <p>In case of bidirectional relationships, be aware that it matters on which end you enable cascading creation.
      It is also possible to enable it on both ends.</p>

		</section>

		<section title="Scenarios">

			<p></p>

			<section title="db.create()">

				<p>The most intuitive case is when you explicitly call db.create() on an object that has cascading
				  creation enabled on one or more of his relationships. If the objects in those relationships have not
				  yet been created, they now will be.</p>

				<p>Here is a simple example, where the objects Author and Book are in a one-to-one 
				relationship (i.e. every Book has exactly one Author):</p>

				<code-panel><![CDATA[
db.begin();

Author a1 = new Author();
a1.setId(1);
a1.setName("John Jackson");

Book b1 = new Book();
b1.setId(1);
b1.setTitle("My Life");
b1.setAuthor(a1);

db.create(b1);

db.commit();]]></code-panel>

				<p>Database before:</p>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Author</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td colspan="2">(empty table)</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Book</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">title</th>
									<th align="left">author_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td colspan="2">(empty table)</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>
				
				<p>Database after:</p>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Author</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John Jackson"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Book</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">title</th>
									<th align="left">author_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"My Life"</td>
									<td>1</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

			</section>

			<section title="db.commit()">

				<p>Cascading creation also works implicitly: any objects that are on the receiving end of a cascaded relationship
				  will be created upon transaction commit, provided they do not exist yet and that the object on the
				  primary end of that relationship does. In other words: if you modify a relationship property of a loaded object,
				  any new objects that now need to be created will be created.</p>

				<p>To demonstrate, let's continue the example from the previous section:
				We have a Book and an Author, in a one-to-one relationship, both already persisted.
				If we now change the book's author to someone new, an object that is not yet in the database, 
				and just call db.commit(), the new Author will be persisted automatically.</p>

				<code-panel><![CDATA[
db.begin();

Author a2 = new Author();
a2.setId(2);
a2.setName("Jack Johnson");

Book b1 = db.load(Book.class, 1);
b1.setAuthor(a2);

db.commit();]]></code-panel>

				<p>Database before:</p>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Author</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John Jackson"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Book</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">title</th>
									<th align="left">author_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"My Life"</td>
									<td>1</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>
				
				<p>Database after:</p>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Author</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John Jackson"</td>
								</tr>
								<tr>
									<td>2</td>
									<td>"Jack Johnson"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Book</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">title</th>
									<th align="left">author_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"My Life"</td>
									<td>2</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

			</section>

			<section title="Modifying a collection">

				<p>The real usefulness of cascading creation gets apparent when dealing with collections.</p>

				<p>For the following examples, we will use the objects Department and Employee which have a
				one-to-many relationship (every Department has one or more Employees). On the Java side, this is expressed
				as the Department having a collection of Employee objects. In the database this will obviously be
				the other way around, with the Employee table referencing the Department table. Every example in this section
				will use the same database as a starting point:</p>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Department</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>23</td>
									<td>"Sales"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Employee</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
									<th align="left">department_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John"</td>
									<td>23</td>
								</tr>
								<tr>
									<td>2</td>
									<td>"Paul"</td>
									<td>23</td>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>3</td>
									<td>"Ringo"</td>
									<td>23</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>
				
				<p><b>Example 1: adding objects</b></p>

				<code-panel><![CDATA[
db.begin();

Employee e4 = new Employee();
e4.setId(4);
e4.setName("George");

Department dep = db.load(Department.class, 23);
dep.getEmployees().add(e4);

db.commit();]]></code-panel>
			
				<p>Database after:</p>
			
				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Department</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>23</td>
									<td>"Sales"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Employee</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
									<th align="left">department_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John"</td>
									<td>23</td>
								</tr>
								<tr>
									<td>2</td>
									<td>"Paul"</td>
									<td>23</td>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>3</td>
									<td>"Ringo"</td>
									<td>23</td>
								</tr>
								<tr>
									<td>4</td>
									<td>"George"</td>
									<td>23</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<p><b>Example 2: removing objects</b></p>
				
				<code-panel><![CDATA[
db.begin();

Department dep = db.load(Department.class, 23);
dep.getEmployees().remove(2);

db.commit();]]></code-panel>
			
				<p>Database after:</p>
			
				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Department</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>23</td>
									<td>"Sales"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Employee</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
									<th align="left">department_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John"</td>
									<td>23</td>
								</tr>
								<tr>
									<td>2</td>
									<td>"Paul"</td>
									<td>23</td>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>3</td>
									<td>"Ringo"</td>
									<td>NULL</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>				
				
				<p>Note: this of course only works if you allow the employee's foreign key department_id to be NULL or,
				alternatively, also delete the Employee when you remove the relationship (either by manually calling
				db.remove() or TODO)</p>
				
				<p><b>Example 3: adding &amp; removing objects</b></p>
				
				<code-panel><![CDATA[
db.begin();

Employee e4 = new Employee();
e4.setId(4);
e4.setName("George");

Employee e5 = new Employee();
e5.setId(5);
e5.setName("Joe");

Employee e6 = new Employee();
e6.setId(6);
e6.setName("Jack");

Department dep = db.load(Department.class, 23);
dep.setEmployees(Arrays.asList(e4, e5, e6));

db.commit();]]></code-panel>
			
				<p>Database after:</p>
			
				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Department</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>23</td>
									<td>"Sales"</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

				<table border="0" cellspacing="0" cellpadding="2" bgcolor="#7270c2"
					style="display:inline">
					<tr bgcolor="#ffffff">
						<th>Employee</th>
					</tr>
					<tr>
						<td>
							<table border="0" cellspacing="0" cellpadding="6" bgcolor="#ededed">
								<tr bgcolor="#7270c2" style="color:#000000">
									<th align="left">id</th>
									<th align="left">name</th>
									<th align="left">department_id</th>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>1</td>
									<td>"John"</td>
									<td>NULL</td>
								</tr>
								<tr>
									<td>2</td>
									<td>"Paul"</td>
									<td>NULL</td>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>3</td>
									<td>"Ringo"</td>
									<td>NULL</td>
								</tr>
								<tr>
									<td>4</td>
									<td>"George"</td>
									<td>23</td>
								</tr>
								<tr bgcolor="#DEDEDE">
									<td>5</td>
									<td>"Joe"</td>
									<td>23</td>
								</tr>
								<tr>
									<td>6</td>
									<td>"Jack"</td>
									<td>23</td>
								</tr>
							</table>
						</td>
					</tr>
				</table>				
				
				<p>The note to example 2 also applies here.</p>
				
			</section>
				
		</section>

		<section title="Limitations">

			<p>TODO</p>

		</section>

		<section title="References">

			<ul>
				<li>
					<a href="jdo-mapping.html">JDO Mapping</a>
				</li>
			</ul>

		</section>


	</body>
</document>