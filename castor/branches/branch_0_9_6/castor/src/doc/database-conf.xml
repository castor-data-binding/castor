<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://castor.exolab.org/database-conf.xml">
  <body>
    <title>Castor JDO Database Configuration</title>

    <section title="News">
  
       <ul>
           <li><b>Release 0.9.6</b>: Changed section about the jdo-conf.dtd to bring it in-line with the
               changed syntax requirements. Please note that the new root element is named 
               'jdo-conf', a 'transaction-demarcation' element is required and that for parameter 
               specification only 'param' elements are used.</li>
           <li>Added a new section about the use of 
               <a href="#JdoConfFactory">JdoConfFactory</a> to specify a database
               configuration without the need to write XML configuration files.</li>
       </ul>

	</section>

    <section title="The Castor configuration file">

      <p>The default way to configure how Castor interacts with a specific database system 
         is by using a configuration file. It specifies the means to obtain a connection
         to the database server, the mapping between Java classes and tables
         in that database server, and the service provider to use for talking
         to that server (For a more flexible way without configuration files see
         section <a href="#JdoConfFactory">JdoConfFactory</a>).</p>

      <p>The application will access the database by its given name
         (<tt>database/name</tt>) and will be able to persist all objects specified
         in the included mapping file(s).</p>

      <p>The <tt>engine</tt> attribute specifies the persistence engine for this
         database server. Different database servers vary in the SQL syntax and
         capabilites they support, and this attribute names the service provider to use.</p>

      <p>The following names are supported in Castor 1.0:
         <table border="1" cellpadding="4">
           <tr><td>db2</td><td>DB/2</td></tr>
           <tr><td>generic</td><td>Generic JDBC support</td></tr>
           <tr><td>hsql</td><td>Hypersonic SQL</td></tr>
           <tr><td>informix</td><td>Informix</td></tr>
           <tr><td>instantdb</td><td>InstantDB</td></tr>
           <tr><td>interbase</td><td>Interbase</td></tr>
           <tr><td>mysql</td><td>MySQL</td></tr>
           <tr><td>oracle</td><td>Oracle 7 - Oracle 9i</td></tr>
           <tr><td>postgresql</td><td>PostgreSQL 7.1</td></tr>
           <tr><td>sapdb</td><td>SAP DB</td></tr>
           <tr><td>sql-server</td><td>Microsoft SQL Server</td></tr>
           <tr><td>sybase</td><td>Sybase 11</td></tr>
         </table></p>
      <p><small>Note: Castor doesn't work with JDBC-ODBC bridge from Sun.
                In particular, MS Access is not supported.
                </small></p>

      <p>The means to acquire a database connection is specified in one of three
         ways: as a JDBC 2.0 driver URL, as a JDBC 2.0 DataSource, or as a DataSource
         to lookup through JNDI. When Castor is used inside a J2EE application server
         it is recommended to use JNDI lookup (see the <tt>jndi</tt> element),
         allowing the application server to manage connection pooling and distributed
         transactions.</p>

      <p>The class mapping is included from an external mapping file, allowing
         multiple mappings to be included in the same database configuration, or two
         databases to share the same mappings. For concurrency and integrity reasons,
         two database configurations should never attempt to use overlapping mappings.
         It is recommended to use one database configuration per database server.</p>

      <p>The mapping file is specified using a URL, typically a <tt>file:</tt> URL.
         If the database configuration file and mapping file reside in the same
         directory, use a relative URL. Relative URLs also work if the database
         configuration and mapping files are obtained from the application JAR and
         reside in the same classpath.</p>

      <p>The <tt>driver</tt> element specifies the JDBC 2.0 driver for obtaining
         new connections to the database server. The driver is obtained from the JDBC
         <tt>DriverManager</tt> and must be located in the class path. The JDBC URL
         locates the driver and provides the access properties. Additional properties
         may be specified using the <tt>param</tt> element (e.g. buffer size, network
         protocol, etc).</p>

      <p>Use the <tt>class-name</tt> attribute to specify the driver class for
         automatic registration with the JDBC <tt>DriverManager</tt>. If missing,
         the driver must be registered in any other means, including properties file,
         <tt>Class.forName()</tt>, etc.</p>
      
      <p>For example, to configure an Oracle 8 thin driver, use:
         <pre><![CDATA[
  <driver class-name="oracle.jdbc.driver.OracleDriver"
          url="jdbc:oracle:thin:@host:port:SID">
    <param name="user" value="scott" />
    <param name="password" value="tiger" />
  </driver>]]>
         </pre></p>

      <p>The <tt>data-source</tt> element specifies the JDBC 2.0 DataSource for
         obtaining new connections to the database server. DataSources are defined
         in the JDBC 2.0 standard extension API which is included with Castor, and
         implement the interface <tt>javax.sql.DataSource</tt>.</p>

      <p>The DataSource implementation class name is specified by the <tt>class-name</tt>
         attribute and configured through Bean-like accessor methods specified for
         the <tt>param</tt> element. The DTD for the <tt>param</tt> element is undefined
         and depends on the DataSource being used.</p>

      <p>For example, to configure a PostgreSQL 7.1 DataSource, use:
         <pre><![CDATA[
  <data-source class-name="org.postgresql.PostgresqlDataSource">
    <param name="serverName" value="host" />
    <param name="portNumber" value="5432" />
    <param name="databaseName" value="db" />
    <param name="user" value="user" />
    <param name="password=" value="secret" />
  </data-source>]]>
         </pre></p>

      <p>The <tt>jndi</tt> element specifies the JDBC 2.0 DataSource for obtaining
         new connections to the database server through JNDI lookup. The JNDI environment
         naming context (ENC) is used to obtain a suitable DataSource..</p>

      <p>When running inside a J2EE application server, this is the preferred method
         for obtaining database connections. It enables the J2EE application server to
         configure the connection, maintain a connection pool, and manage distributed
         transactions.</p>

      <p>For example, to specify a J2EE DataSource, use:
         <pre><![CDATA[
  <jndi name="java:comp/env/jdbc/mydb" />]]>
         </pre></p>

    </section>

    <section title="Sample Configuration File">

      <p>The following configuration file uses an Oracle 8 thin JDBC driver and
         three mapping files:
         <pre><![CDATA[
  <database name="ebiz" engine="oracle">
    <driver class-name="oracle.jdbc.driver.OracleDriver"
            url="jdbc:oracle:thin:@machine:post:SID">
      <param name="user" value="scott" />
      <param name="password" value="tiger" />
    </driver>
    <mapping href="products.xml" />
    <mapping href="orders.xml" />
    <mapping href="customers.xml" />
  </database>]]>
         </pre></p>

      <p>The following configuration file uses a connection obtained from the
         J2EE application server and a single mapping file:
         <pre><![CDATA[
  <database name="ebiz" engine="oracle">
    <jndi name="java:comp/env/jdbc/mydb" />
    <mapping href="ebiz.xml" />
  </database>]]>
         </pre></p>

    </section>


    <section title="Configuration For Various Databases">

      <table border="1" cellpadding="4">
        <tr>
          <td><b>Driver</b></td>
          <td><b>Configuration</b></td>
        </tr>
        <tr>
          <td valign="top">Sybase jConnect</td>
          <td valign="top"><pre><![CDATA[
  <data-source class-name="com.sybase.jdbc2.jdbc.SybDataSource">
    <param name="user" value="user" />
    <param name="password value="secret" />
    <param name="portNumber" value="4100" />
    <param name="serverName" value="host" />
  </data-source>]]></pre></td>
        </tr>
<!-- JDBC-ODBC don't work with Castor!
        <tr>
          <td valign="top">JDBC-ODBC (Access, SQL Server)</td>
          <td valign="top"><pre><![CDATA[
  <driver class-name="sun.jdbc.odbc.JdbcOdbcDriver" 
          url="jdbc:odbc:db">
    <param name="user" value="user"/>
    <param name="password" value="secret"/>
  </driver>]]></pre></td>
        </tr>
-->
        <tr>
          <td valign="top">Oracle Thin Driver</td>
          <td valign="top"><pre><![CDATA[
  <driver class-name="oracle.jdbc.driver.OracleDriver"
          url="jdbc:oracle:thin:@host:post:SID">
    <param name="user" value="scott" />
    <param name="password" value="tiger" />
  </driver>]]></pre></td>
        </tr>
        <tr>
          <td valign="top">PostgreSQL</td>
          <td valign="top"><pre><![CDATA[
   <data-source class-name="org.postgresql.PostgresqlDataSource">
     <param name="serverName" value="host" />
     <param name="portNumber" value="5432" />
     <param name="databaseName" value="db" />
     <param name="user" value="user" />
     <param name="password" value="secret" />
   </data-source>]]></pre></td>
        </tr>
        <tr>
          <td valign="top">InstantDB</td>
          <td valign="top"><pre><![CDATA[
  <driver class-name="org.enhydra.instantdb.jdbc.idbDriver"
          url="jdbc:idb:C:\\castor-0.8.8\\db\\test\\test.prp">
    <param name="user" value="" />
    <param name="password" value="" />
  </driver>]]></pre></td>
        </tr>
       </table>

    <p>
    <b>NOTE:</b> <br />
    Besides the examples listed above, a good source of 
    configuraton examples are the JDO tests (<tt>src/tests/jdo</tt>). 
    See the XML decriptor for each database type. 
    </p>

    </section>


    <section title="The JDO Configuration DTD">

    <p>For validation, the configuration file should include the following
       document type definition. For DTD validation use:
      <pre><![CDATA[
  <!DOCTYPE jdo-conf PUBLIC "-//EXOLAB/Castor JDO Configuration DTD Version 1.0//EN"
                            "http://castor.exolab.org/jdo-conf.dtd">
      ]]></pre>
      For XML Schema validation use:
      <pre><![CDATA[
  <!DOCTYPE jdo-conf PUBLIC "-//EXOLAB/Castor JDO Configuration Schema Version 1.0//EN"
                             "http://castor.exolab.org/jdo-conf.xsd">
      ]]></pre>
      The Castor namespace URI is <tt>http://castor.exolab.org/</tt>.</p>

      <p>The Castor JDO database configuration DTD is:
         <pre><![CDATA[
  <!ELEMENT jdo-conf ( database+, transaction-demarcation )>

  <!ELEMENT database ( ( driver | data-source | jndi )?,
                       mapping+ )>
                       
  <!ATTLIST database
            name ID      #REQUIRED
            engine CDATA "generic">

  <!ELEMENT mapping EMPTY>
  <!ATTLIST mapping
            href CDATA #REQUIRED>

  <!ELEMENT driver ( param* )>
  <!ATTLIST driver
            url        CDATA #REQUIRED
            class-name CDATA #IMPLIED>

  <!ELEMENT data-source ( param* )>
  <!ATTLIST data-source
            class-name CDATA #REQUIRED>

  <!ELEMENT jndi ANY>
  <!ATTLIST jndi
            name CDATA #REQUIRED>

  <!ELEMENT transaction-demarcation ( transaction-manager? )>
  <!ATTLIST transaction-demarcation
            mode CDATA #REQUIRED>

  <!ELEMENT transaction-manager ( param* )>
  <!ATTLIST transaction-manager
            name CDATA #REQUIRED>
            
  <!ELEMENT param EMPTY>
  <!ATTLIST param
            name  CDATA #REQUIRED
            value CDATA #REQUIRED>

      ]]></pre></p>


    </section>


    <section title="JdoConfFactory">

      <p>Many applications need to connect to a database using varying
         user accounts or database instances. To accomplish this, the utility
         class <api class="org.exolab.castor.util.JdoConfFactory">JdoConfFactory</api>
         and a JDO.setConfiguration() overload accepting an <api>org.exolab.castor.jdo.conf.JdoConf</api>
         instance has been added to Castor.</p>
         
      <p>The following code snippet shows an example how to create a JDO configuration without 
         the use of a default XML-based database configuration file:</p>
         
      <code>
  JDO jdo;
  org.exolab.castor.jdo.conf.Database jdoDbConf;

  String db_url = "jdbc:oracle:thin:localhost:1521:SID";
  String username = "scott";
  String password = "tiger";

  <comment>// Use the mapping file located in the current Java package</comment>
  URL map_url = getClass().getResource("mapping.xml");

  <comment>// Create the JDO object</comment>
  jdo = new JDO();
  jdo.setDatabaseName("mydb");

  <comment>// Set up the JDO configuration with the specified database driver and connection information</comment>
  jdoDbConf = JdoConfFactory.createJdoDbConf("mydb", "oracle", 
	  JdoConfFactory.createJdoDriverConf("oracle.jdbc.driver.OracleDriver",
						db_url, username, password));

  <comment>// Store the mapping file location in the configuration</comment>
  jdoDbConf.addMapping(JdoConfFactory.createJdoMappingConf(map_url.toString()));

  <comment>// Activate the JDO configuration</comment>
  jdo.setConfiguration(JdoConfFactory.createJdoConf(jdoDbConf));
       </code>

       <p>As an alternative to using a org.exolab.castor.jdo.conf.Driver,
          you can also configure Castor to use a JDBC 2.0 DataSource:</p>

       <code>
  <comment>// Configure the JDBC data source, in this case an Oracle data source</comment>
  org.exolab.castor.jdo.conf.DataSource dsConf = JdoConfFactory.createJdoDSConf("oracle.jdbc.pool.OracleConnectionCacheImpl");

  dsConf.addParam(JdoConfFactory.createJdoConfParam("URL", db_url));
  dsConf.addParam(JdoConfFactory.createJdoConfParam("user", username));
  dsConf.addParam(JdoConfFactory.createJdoConfParam("password", password));

  <comment>// Set up JDO the configuration with the specified data source configuration</comment>
  jdoDbConf = JdoConfFactory.createJdoDbConf("mydb", "oracle", dsConf);

  <comment>// Store the mapping file location in the configuration</comment>
  jdoDbConf.addMapping(JdoConfFactory.createJdoMappingConf(map_url.toString()));

  <comment>// Activate the JDO configuration</comment>
  jdo.setConfiguration(JdoConfFactory.createJdoConf(jdoDbConf));
       </code>

    </section>

  </body>
</document>
