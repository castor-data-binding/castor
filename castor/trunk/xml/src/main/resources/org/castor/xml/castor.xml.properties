# Castor XML properties file
#
# This file specifies default values of Castor's XML modul which may be
# overwritten by the user through castor.properties file.
#
# $Id: castor.properties 7076 2007-07-24 22:03:25Z rjoachim $


# Defines a non-default XML parser to be used by Castor. By default,
# Castor will use JAXP internally to obtain an XML parser.
# The parser must implement org.xml.sax.Parser. (???)
#
# Should be used in the following situations:
# a) A different XML parser vendor should be used.
# b) With Java 5.0, an external XML parser should be used.
#
#org.exolab.castor.parser=org.apache.xerces.parsers.SAXParser

# Defines the (default) XML serializer factory to use by Castor, which must
# implement org.exolab.castor.xml.SerializerFactory; default is 
# org.exolab.castor.xml.XercesXMLSerializerFactory
# 
# When using Castor XML with JDK 5.0, you may switch to the XercesJDK5XMLSerializerFactory
# which will use the Xerces instance as shipped with the JDK itself; this avoids
# having to download another Xerces instance and installing it. 
org.exolab.castor.xml.serializer.factory=org.exolab.castor.xml.XercesXMLSerializerFactory
#org.exolab.castor.xml.serializer.factory=org.exolab.castor.xml.XercesJDK5XMLSerializerFactory

# Defines the NodeType for use with Java primitive types (int, long, boolean, etc).
# This value is only used by the Introspector. Valid values are either "attribute" or
# "element". By default, all primitives are marshaled as attributes.
#
org.exolab.castor.xml.introspector.primitive.nodetype=attribute

# Defines the Naming "style" or conventions to use when creating XML names from Java
# class or field names. Valid values are as follows:
#
# -------------------------------------------------------------------------------------
# lower (default)  |  All names are lowercase with hyphens separating words.
#                  |
#                  |  Example: personInfo = person-info
# -------------------------------------------------------------------------------------
# mixed            |  All names are mixed case, with Uppercase character as the first
#                  |  letter of a new word.
#                  |
#                  |  Example: personInfo = personInfo
#                  |  Example: FooBar     = fooBar
# -------------------------------------------------------------------------------------
# {Any ClassName}  |  Any Class which implements org.exolab.castor.xml.XMLNaming.
# -------------------------------------------------------------------------------------
#
# By default, all names are treated as the "lower" option.
#
org.exolab.castor.xml.naming=lower

# Property specifying the 'type' of the Java naming conventions
# to use. Values of this property must be either null or
# the name of a class which extends {@link org.castor.xml.JavaNaming}.
org.castor.xml.java_naming=

# True if xml documents should be validated by the SAX Parser. Defaults to false.
#
org.exolab.castor.parser.validation=false

# True for parser to support Namespaces. Defaults to false.
#
org.exolab.castor.parser.namespaces=false

# True if all documents should be validated by the marshaling framework
# Defaults to true.
#
org.exolab.castor.marshalling.validation=true

# Property specifying whether XML documents (as generated at marshalling)
# should use indentation or not.
#
# Possible values:
# - false (default)
# - true
#
# <pre>
# org.exolab.castor.indent
# </pre>
org.exolab.castor.indent=false

# Comma separated list of SAX 2 features that should be enabled for the
# default parser.
#
#org.exolab.castor.sax.features=

# Comma separated list of SAX 2 features that should be disabled for the
# default parser.
#
#org.exolab.castor.sax.features-to-disable=

# Property specifying whether or not to search for an proxy interface at marshalling.
# If property is not empty the objects to be marshalled will be searched if they
# implement one of the given interface names. If the interface is implemented the
# superclass will be marshalled instead of the class itself.
#
#org.exolab.castor.xml.proxyInterfaces=\
#  net.sf.cglib.proxy.Factory, \
#  org.hibernate.proxy.HibernateProxy

# Property specifying the regular expression validator
# to use. The specified class must implement
# org.exolab.castor.xml.validators.RegExpValidator.
# org.exolab.castor.regexp=

# Specifyies whether the ClassDescriptorResolver should (automatically) search
# for and consult with package mapping files (.castor.xml) to retrieve class
# descriptor information. Defaults to true.
#
org.exolab.castor.xml.loadPackageMappings=true
        
# Property specifying whether sequence order validation should be lenient;
# Defaults to false
#
org.exolab.castor.xml.lenient.sequence.order=false
        
# Property specifying whether id/href validation should be lenient;
# defaults to false
#
org.exolab.castor.xml.lenient.id.validation=false

# Property specifying XML namespace to Java package mappings
# 
#org.exolab.castor.xml.nspackages=

# Property specifying whether to apply strictness to elements when
# unmarshalling. Default is true which means that elements appearing in the
# XML document, which cannot be mapped to a class, cause a {@link SAXException}
# to be thrown. If set to false, these 'unknown' elements are ignored.
org.exolab.castor.xml.strictelements=false

# Property specifying whether element strictness for introspected 
# classes/elements should be lenient (aka allowed); defaults to true
org.exolab.castor.xml.lenient.introspected.element.strictness=true

# ******************************************************
# This section defines backwards compatibility switches.
# ******************************************************

# Property specifying whether or not to save the "keys" of a {@link Hashtable} or 
# {@link Map} during marshalling. By default this is true.
#
# Possible values:
# - false
# - true (default) 
#
# <pre>
# org.exolab.castor.xml.saveMapKeys
# </pre>
#
# @since 0.9.5.3
#
org.exolab.castor.xml.saveMapKeys=true

# Property specifying if introspection should be used at class resolving.
# 
# <pre>
# org.castor.xml.class-resolver.use-introspection
# </pre>
#
org.castor.xml.class-resolver.use-introspection=true

# The property name for enabling collection wrapping.
# The property controls whether or not collections
# (arrays, vectors, etc) should be wrapped in a container element.
# For example:
#
# <pre>
#    &lt;foos&gt;
#       &lt;foo&gt;foo1&lt;/foo&gt;
#       &lt;foo&gt;foo2&lt;/foo&gt;
#    &lt;/foos&gt;
#
#   instead of the default:
#
#    &lt;foos&gt;foo1&lt;foos&gt;
#    &lt;foos&gt;foo2&lt;/foos&gt;
#
# </pre>
#
# Use this property with a value of true or false in the
# castor.properties file
#
# org.exolab.castor.xml.introspector.wrapCollections=true
# -or-
# org.exolab.castor.xml.introspector.wrapCollections=false
#
# This property is false by default.
#
org.exolab.castor.xml.introspector.wrapCollections=false

