<!DOCTYPE mapping PUBLIC "-//EXOLAB/Castor Mapping DTD Version 1.0//EN"
                           "http://castor.org/mapping.dtd">
<mapping>
  <include href="../ctf/jdo/tc0x/mapping.xml"/>
  <include href="../ctf/jdo/tc1x/mapping.xml"/>
  <include href="../ctf/jdo/tc2x/mapping.xml"/>
  <include href="../ctf/jdo/tc3x/mapping.xml"/>
  <include href="../ctf/jdo/tc8x/mapping.xml"/>
  <include href="../ctf/jdo/tc9x/mapping.xml"/>
  <include href="../ctf/jdo/tc20x/mapping.xml"/>

  <!-- Mapping for TestObject to test_table
       Single object mapping, shared access, dirty checking on all fields -->
  <class name="jdo.TestManyGroup" access="shared" identity="id" >
    <description>Table used for testing many to many relation</description>
    <map-to table="test_many_group" />
    <field name="id" type="integer">
      <sql name="gid" type="integer" />
    </field>
    <field name="value1" type="string"  required="true">
      <sql name="value1" type="varchar" />
    </field>
    <field name="people" type="jdo.TestManyPerson" collection="collection"
    required="false" set-method="setPeople" get-method="getPeople">
    <sql many-table="test_group_person"/>
    </field>
  </class>

  <class name="jdo.TestManyPerson" access="shared" identity="id" >
    <description>Table used for testing many to many relation</description>
    <map-to table="test_many_person" />
    <field name="id" type="integer">
      <sql name="pid" type="integer" />
    </field>
    <field name="value1" type="string"  required="true">
      <sql name="value1" type="varchar" />
    </field>
    <field name="helloworld" type="string" >
      <sql name="helloworld" type="varchar" />
    </field>
    <field name="sthelse" type="string"  >
      <sql name="sthelse" type="varchar" />
    </field>
    <field name="group" type="jdo.TestManyGroup" collection="collection"
    required="false">
      <sql many-table="test_group_person"/>
    </field>
  </class>

  <class name="jdo.TestManyGroupKeyGen" access="shared" identity="id" key-generator="MAX">
    <description>Table used for testing many to many relation</description>
    <cache-type type="count-limited" capacity="30"/>
    <map-to table="test_many_group" />
    <field name="id" type="integer">
      <sql name="gid" type="integer" />
    </field>
    <field name="value1" type="string"  required="true">
      <sql name="value1" type="varchar" />
    </field>
    <field name="people" type="jdo.TestManyPersonKeyGen" collection="collection"
    required="false" >
    <sql many-table="test_group_person"/>
    </field>
  </class>

  <class name="jdo.TestManyPersonKeyGen" access="shared" identity="id" key-generator="MAX">
    <description>Table used for testing many to many relation</description>
    <cache-type type="count-limited" capacity="30"/>
    <map-to table="test_many_person" />
    <field name="id" type="integer">
      <sql name="pid" type="integer" />
    </field>
    <field name="value1" type="string"  required="true">
      <sql name="value1" type="varchar" />
    </field>
    <field name="helloworld" type="string" >
      <sql name="helloworld" type="varchar" />
    </field>
    <field name="sthelse" type="string"  >
      <sql name="sthelse" type="varchar" />
    </field>
    <field name="group" type="jdo.TestManyGroupKeyGen" collection="collection"
    required="false">
      <sql many-table="test_group_person"/>
    </field>
  </class>

  <class name="jdo.TestLimit" access="shared" identity="id">
    <description>Table used for concurrency and performance testing</description>
    <map-to table="test_table" />
    <field name="id" type="integer">
      <sql name="id" type="integer" />
    </field>
    <field name="value1" type="string" required="true">
      <sql name="value1" type="varchar"/>
    </field>
    <field name="value2" type="string">
      <sql name="value2" type="varchar" dirty="ignore"/>
    </field>
  </class>
  
  <class name="jdo.TestCol" identity="id">
    <description>Table used for testing different collection types support</description>
    <cache-type type="none" />
    <map-to table="test_col" />
    <field name="id" type="integer">
      <sql name="id" type="integer" />
    </field>
    <!--
    <field name="dummy" type="integer" >
      <sql name="dum" type="integer" />
    </fild> -->
  </class>

  <class name="jdo.TestItem" identity="id">
    <description>Table used for testing different collection types support</description>
    <cache-type type="none" />
    <map-to table="test_item" />
    <field name="id" type="integer">
      <sql name="iid" type="integer" />
    </field>
    <field name="testCol" type="jdo.TestCol" >
      <sql name="id" />
    </field>
  </class>

  <class name="jdo.TestComparableItem" identity="id">
    <description>Table used for testing SortedSet collection type support</description>
    <cache-type type="none" />
    <map-to table="test_comp_item" />
    <field name="id" type="integer">
      <sql name="iid" type="integer" />
    </field>
    <field name="testCol" type="jdo.TestCol" >
      <sql name="id" />
    </field>
  </class>

  <class name="jdo.TestColArrayList" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="arraylist">
    </field>
  </class>

  <class name="jdo.TestColAdd" extends="jdo.TestCol">
    <description>Modification of TestCollArrayList to test manual addThing()</description>
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="arraylist" get-method="getItems" set-method="addItem">
    </field>
  </class>

  <class name="jdo.TestColArray" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="items" type="jdo.TestItem" collection="array">
    </field>
  </class>

  <class name="jdo.TestColCollection" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="collection">
    </field>
  </class>

  <!--
  <class name="jdo.TestColHashMap" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="hashmap">
    </field>
  </class>

  <class name="jdo.TestColHashSet" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="hashset">
    </field>
  </class>
  -->

  <class name="jdo.TestColHashtable" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always 
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="hashtable">
    </field>
  </class>

  <class name="jdo.TestColMap" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always 
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="map">
    </field>
  </class>

  <class name="jdo.TestColSet" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always 
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="set">
    </field>
  </class>

  <class name="jdo.TestColSortedSet" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always 
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestComparableItem" collection="sortedset">
    </field>
  </class>

  <class name="jdo.TestColVector" extends="jdo.TestCol">
    <description>Table used for testing different collection types support</description>
    <!-- this is a dirty hack, don't follows. It only work if load always 
         done by db.load( MyClass.class, id ). -->
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="vector">
    </field>
  </class>

  <class name="jdo.TestColIterator" extends="jdo.TestCol">
    <description>Class used for testing collection type 'iterator'</description>
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="iterator">
    </field>
  </class>

  <class name="jdo.TestColEnumeration" extends="jdo.TestCol">
    <description>Class used for testing collection type 'enumerate'</description>
    <map-to table="test_col" />
    <field name="item" type="jdo.TestItem" collection="enumerate">
    </field>
  </class>

  <class name="jdo.Master" key-generator="MAX" identity="id">
    <map-to table="master" />
    <field name="depend1" type="jdo.Depend1">
      <sql name="depend1_id" />
      <bind-xml name="depend1" />
    </field>
    <field name="id" type="integer">
      <sql name="id" />
      <bind-xml name="id" />
    </field>
    <field name="depends2" collection="arraylist" type="jdo.Depend2">
      <sql many-key="master_id" />
      <bind-xml name="depends2" />
    </field>
  </class>

  <class name="jdo.Depend2" key-generator="MAX" depends="jdo.Master" identity="id">
    <map-to table="depend2" />
    <field name="master" type="jdo.Master">
      <sql name="master_id" />
      <bind-xml name="master" />
    </field>
    <field name="id" type="integer">
      <sql name="id" />
      <bind-xml name="id" />
    </field>
  </class>

  <class name="jdo.Depend1" key-generator="MAX" depends="jdo.Master" identity="id">
    <map-to table="depend1" />
    <field name="id" type="integer">
      <sql name="id" />
      <bind-xml name="id" />
    </field>
  </class>

	<!-- TC129 -->
    <class identity="id" name="jdo.Container">
		<map-to table="container"/>
		<field name="id" type="integer">
			<sql name="id" type="integer"/>
		</field>
		<field name="prop" type="jdo.ContainerItem" collection="arraylist">
            <sql many-key="item" />
		</field>
		<field name="name" type="string">
			<sql name="name" type="varchar"/>
		</field>
	</class>

    <class identity="id" name="jdo.ContainerItem">
		<map-to table="container_item"/>
		<field name="id" type="integer">
			<sql name="id" type="integer"/>
		</field>
		<field name="item" type="jdo.Container">
			<sql name="item"/>
		</field>
		<field name="value" type="string">
			<sql name="value" type="varchar"/>
		</field>
	</class>

      <class name="jdo.SortedContainer" identity="id">
        <map-to table="sorted_container" />
        <field name="id" type="integer" >
          <sql name="id" type="integer"/>
        </field>
        <field name="name" type="string">
          <sql name="name" type="char" />
        </field>
        <field name="twos" type="jdo.SortedContainerItem" collection="sortedset" comparator="jdo.CustomComparator">
            <sql many-key="id_1" />
        </field>
      </class>
    
      <class name="jdo.SortedContainerItem" identity="id">
        <map-to table="sorted_item" />
        <field name="id" type="integer" >
          <sql name="id" type="integer"/>
        </field>
        <field name="id1" type="integer" >
          <sql name="id_1" type="integer"/>
        </field>
        <field name="name" type="string">
          <sql name="name" type="char" />
        </field>
      </class>
	
</mapping>
