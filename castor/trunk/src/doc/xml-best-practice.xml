<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://castor.codehaus.org/xml-best-practice.xml">
  <properties>
    <title>Castor XML -- Best practices</title>
    <abstract>
       Castor XML -- Best practices
    </abstract>
    <status>Draft</status>
  </properties>

  <body>
    <title>Castor XML -- Best practices</title>
    <header>
    </header>

    <section title="Introduction">

      <p>
        There are many users of Castor XML who (want to) use Castor XML in in
        high-volume applications. To fine-tune Castor for such an environment,
        it is necessary to understand many of the product features in detail
        and to be able to balance their use according to the application needs.
        Even though many of these features are documented in various places,
        people frequently asked for a 'best practises' document, a document
        that brings together these technical topics in one place and that
        presents them as a set of easy-to-use recipes.
      </p>

      <p>
        Please be aware that this document is <i>under construction</i>.  But
        still we believe that this document -- even when in its conception
        phase -- provides valuable information to users of Castor XML.
      </p>

    </section>

    <section title="General">
      <section title="Source Generator">
        <p>
          It is not generally recommended to generate code into the default
          package, especially since code in the default package cannot be
          referenced from code in any other package.
        </p>

        <p>
          Additionally, we recommend that generated code go into a different
          package then the code that makes use of the generated code.  For
          example, if your application uses Castor to process an XML
          configuration file that is used by code in the package
          <tt>org.example.userdialog</tt> then we do not recommend that the
          generated code also go into that package.  However, it would be
          reasonable to generate source to process this XML configuration file
          into the package <tt>org.example.userdialog.xmlconfig</tt>.
        </p>

        <!-- FIXME:  Add section about:  do not store generated code in SCM -->
      </section>
    </section>

    <section title="Performance Considerations">

      <section title="Use of ClassDescriptorResolver">

        <p>
          Creating instances of <api>org.exolab.castor.xml.Marshaller</api> and
          <api>org.exolab.castor.xml.Unmarshaller</api> for the purpose of XML
          data binding is easy to achieve at the API usage level.  However,
          details of API use have an impact on application performance; each
          instance creation involves setup operations.
        </p>

        <p>
          This is generally not an issue for one-off invocations; however, in a
          multi-threaded, high volume use scenario this can be become a serious
          issue. Internally, Castor uses a collection of <i>Descriptor</i>
          classes to keep information about the Java entities to be marshaled
          and unmarshaled. With each instance creation of (Un)Marshaller, this
          collection will be built from scratch (again and again).
        </p>

        <p>
          To avoid this initial configuration 'penalty', Castor allows you to
          cache these Descriptor classes through its
          <api>org.exolab.castor.xml.ClassDescriptorResolver</api> component.
          This cache allows reuse of these Descriptor instances between
          (Un)Marshaller invocations.
        </p>

        <p>
          First create an instance of <tt>ClassDescriptorResolver</tt> using the
          following code fragment:
        </p>

        <code-panel>
ClassDescriptorResolver classDescriptorResolver =
   ClassDescriptorResolverFactory.createClassDescriptorResolver(BindingType.XML);
MappingUnmarshaller mappingUnmarshaller = new MappingUnmarshaller();
MappingLoader mappingLoader = mappingUnmarshaller.getMappingLoader(mapping, BindingType.XML);
classDescriptorResolver.setMappingLoader(mappingLoader);</code-panel>

        <p>and then reuse this instance as shown below:</p>

        <code-panel>
Unmarshaller unmarshaller = new Unmarshaller();
unmarshaller.setResolver((XMLClassDescriptorResolver) cdResolver);
unmarshaller.unmarshal(...);</code-panel>

      </section>

    </section>

  </body>

</document>
