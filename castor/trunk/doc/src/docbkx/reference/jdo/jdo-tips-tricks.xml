<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
     "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
  <section id="jdo.tips-tricks">
    <title>Castor JDO - Tips &amp; Tricks</title>

    <section id="jdo.tips-tricks.logging-tracing">
      <title>Logging and Tracing</title>

      <para>
         When developing using Castor, we recommend that you use the various
         <literal>setLogWriter</literal> methods to get detailed information and error
         messages.
      </para>

      <para>
         Using a logger with <classname>org.exolab.castor.mapping.Mapping</classname> 
         will provide detailed information about mapping decisions made by Castor and
         will show the SQL statements being used.
      </para>

      <para>
         Using a logger with <classname>org.exolab.castor.jdo.JDO</classname> 
         will provide trace messages that show when Castor is loading, storing, 
         creating and deleting objects. All database operations will appear in 
         the log; if an object is retrieved from the cache or is not modified, 
         there will be no trace of load/store operations.
      </para>

      <para>
         Using a logger with <classname>org.exolab.castor.xml.Unmarshaller</classname> 
         will provide trace messages that show conflicts between the XML document and
         loaded objects.
      </para>

      <para>
         A simple trace logger can be obtained from
         <classname>org.exolab.castor.util.Logger</classname>. This logger uses the
         standard output stream, but prefixes each line with a short message
         that indicates who generated it. It can also print the time and date of
         each message. Since logging is used for warning messages and simple
         tracing, Castor does not require a sophisticated logging mechanism.
      </para>

      <para>
         Interested in integratating Castor's logging with Log4J? Then see
         <link linkend="jdo.faq.logging.log4j">this question</link> 
         in the JDO FAQ.
      </para>

    </section>

    <section id="jdo.tips-tricks.access-mode">
      <title>Access Mode</title>

      <para>
         If you are using JDO objects with the default access mode ('shared') and too many transactions
         abort when attempting to commit due to locks, you should consider upgrading to an 'exclusive'
         mode. When two transactions attempt to modify and store the same object at the same time,
         lock issues arise. Upgrading to an 'exclusive' mode will prevent concurrent transactions
         from modifying the same object at once.
      </para>

      <para>
         If too many transactions abort when attempting to commit due to dirty checking, you should
         consider upgrading to a 'locked' mode. When external database access modifies the same objects
         being managed by Castor, Castor will complain that objects are dirty. Upgrading to a 'locked'
         mode will prevent concurrent update.
      </para>

      <para>
         Be advised that 'exclusive' mode introduces lock contention in the Castor persistence engine,
         and 'locked' mode adds lock contention in the database. Lock contention has the effect of
         slowing down the application and consuming more CPU.
      </para>

      <para>
         If too many transaction abort due to deadlock detection, consider modifying the application
         logic. Deadlock occurs when two transactions attempt to access the same objects but not in
         the same order.
      </para>

    </section>

    <section id="jdo.tips-tricks.inheritence">
      <title>Inheritence</title>

      <para>
         There are two types of inheritence: Java inheritence and relational inheritence.
      </para>

      <para>
         With Java inheritence, two objects extend the same base class and map to two different
         tables. The mapping file requires two different mappings for each of the objects.
         For example, if <literal>Employee</literal> and <literal>Customer</literal> both 
         extend <literal>Person</literal>, but <literal>Employee</literal> maps to the table 
         <literal>emp</literal> and <literal>Person</literal> to the table 
         <literal>person</literal>, the mapping file should map both of these objects 
         separately.
      </para>

      <para>
         With relation inheritence, one table provides the base information and another table
         provides additional information using the same primary keys in both. Use the <literal>extends</literal>
         attribute to specify such inheritence in the mapping file. For example, if <literal>Computer</literal>
         extends <literal>Product</literal> and the table <literal>comp</literal> provides computer-specific columns
         in addition to product columns in <literal>prod</literal>, the mapping for <literal>Computer</literal> will
         specify <literal>Product</literal> as the extended class.
      </para>

      <para>
         When a class just extends a generic base class or implements an interface, this form
         of inheritence is not reflected in the mapping file.
      </para>
    </section>

    <section id="jdo.tips-tricks.views-of-the-same-object">
      <title>Views of Same Object</title>

      <para>
         It is possible to use different objects and mappings to the same tables. For example,
         it is possible to define a subset of a table and load only several of the columns,
         or load an object without its relations.
      </para>

      <para>
         To determine the first and last names and e-mail address of an object without loading
         the entire person object, create a subset class and map that class to a portion of
         the table. Such a class cannot be used to create a new person, but can be used to
         delete or modify the person's details.
      </para>

      <para>
         Use partial views with care. If you attempt to load the same record using a full
         object and a subset object, changes to one of these objects are allowed, but
         changes to both will result in a conflict and roll back the transaction.
         Locking will not work properly between full and subset objects.
         Also note, that each of the two objects will have its own cache, so
         if you update the first object and load the second, you may obtain old values.
         To avoid this situation you may turn off the cache for both objects:
         <programlisting><![CDATA[
             <class ... >
                <cache-type type="none">
                ...
             </class>]]>
         </programlisting>
      </para>
    </section>

    <section id="jdo.tips-tricks.upgrading-locks">
      <title>Upgrading Locks</title>

      <para>
         When an object is loaded into memory in the default access mode ('shared'),
         a read lock is acquired on that object. When the transaction commits, if there
         are changes to the object a write lock will be required. There is no guarantee
         that a write lock can be acquired, e.g. if another transaction attempts to
         change the same object at the same time.
      </para>

      <para>
         To assure concurrent access, you may upgrade the object's lock by calling the
         <methodname>org.exolab.castor.jdo.Database.lock(java.lang.Object)</methodname> 
         method. This method will either acquire a write lock or return if a timeout 
         elapses and the lock could not be acquired. Once a lock has been acquired, 
         no other transaction can attempt to read the object until the current 
         transaction completes.
      </para>

      <para>
         Object locking is recommended only if concurrent access results in conflicts
         and aborted transactions. Generally locks results in lock contention which has an
         effect on performance.
      </para>
    </section>

    <section id="jdo.tips-tricks.noclassdeffounderror">
       <title>NoClassDefFoundError</title>
      
       <para>
          Check your CLASSPATH, check it often, there is no reason not to!
       </para>
    </section>

    <section id="jdo.tips-tricks.create-method">
      <title>Create method</title>
      
      <para>
         Castor requires that classes have a public, no-argument constructor
         in order to provide the ability to marshal &amp; unmarshal objects of that type.
      </para>

      <para>
         create-method is an optional attribute to the <literal>&lt;field&gt;</literal> 
         mapping element that can be used to overcome this restriction in cases where 
         you have an existing object model that consists of, say, singleton classes
         where public, no-argument constructors must not be present by definition.
      </para>

      <para>
         Assume for example that a class "<literal>A</literal>" that you want to be 
         able to unmarshal uses a singleton class as one of its properties. When
         attempting to unmarshal class "<literal>A</literal>", you should get an 
         exception because the singleton property has no public no-arg constructor.
         Assuming that a reference to the singleton can be obtained via a static
         getInstance() method, you can add a "create method" to class 
         <literal>A</literal> like this:
      </para>

      <programlisting>
         <![CDATA[
            public MySingleton getSingletonProperty()
            {
               return MySingleton.getInstance();
            }]]>
      </programlisting>

      <para>
         and in the mapping file for class A, you can define the singleton
         property like this:
      </para>

      <programlisting language="xml">
         <![CDATA[
            <field name="mySingletonProperty"
                  type="com.u2d.MySingleton"
                  create-method="getSingletonProperty">
               <bind-xml name="my-singleton-property" node="element" />
            </field>]]>
      </programlisting>

      <para>
         This illustrates how the create-method attribute is quite a useful
         mechanism for dealing with exceptional situations where you might
         want to take advantage of marshaling even when some classes do not
         have no-argument public constructors.
      </para>

      <note>
	      <para>
	        As of this writing, the specified 
	        create-method must exist as a method in the current class (i.e. the class 
	        being described by the current <literal>&lt;class&gt;</literal> element). 
	        In the future it may be possible to use external static factory methods.
	      </para>
      </note>
    </section>
  </section>
